<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[terrible installation guide for caffe2]]></title>
    <url>%2F2018%2F04%2F06%2Fterrible-installation-guide-for-caffe2%2F</url>
    <content type="text"><![CDATA[CUDA + CUDNN + NCCL 前两个其他框架一般也都会装，但是需要注意一下版本。 NCCL注意要安装version2，github上的那个没用了。 installation by anaconda anaconda是个很好的python整合包，你可以用 1conda install -c caffe2 caffe2-cuda8.0-cudnn7 是不是很简单！ 。 。 。 然而如果你想运行Detectron，装这个测试用例都通不过。提示有些编译好的c库函数找不到…… 此时你可能需要自己编译caffe2…… installation by source code 先从github上把项目down下来吧，官网写的挺详细的。然后 1sudo make install 没通过，缺nnpack.h，看上去是NNPACK没装上。 回到cmake步，发现NNPACK没装，但是提示“brace yourself~we will install for you”。看来默认安装失败了。。。再往上找发现编译NNPACK需要安装confu和ninja。 不过需要注意的是，单用 1sudo apt-get install ninja-build 安装的是1.5版本的，编译NNPACK需要最低1.7。于是去ninja官网下载一个最新的安装上去。 编译NNPACK需要的依赖装完后再试一下编译caffe2，这下直接好了。 No module named caffe2.python 如果直接上 1sudo make install 会直接把文件放到/usr/local下面。笔者使用anaconda env，还是希望不要污染根目录的，因此加上*&quot;DESTDIR=&quot;*参数，指定将文件放在哪里，注意这个只是个path prefix，因此还是会存在 DESTDIR/usr/local下面。 接着就是加入到对应的python的包目录下面。一种方法是改环境变量PYTHONPATH，笔者使用的是conda environment，这个方法好像没成功。遂用第二种方法，简单粗暴的把生成的lib、bin、include、share下面的所有文件复制到python环境的对应目录下面了，反正正常安装包也是这么个步骤。这么搞不用设置环境变量，也不会和其他的python环境串起来。 搞定之后试一下import，终于可以了。。。]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[survey of instance segmentation]]></title>
    <url>%2F2018%2F04%2F04%2Fsurvey-of-instance-segmentation%2F</url>
    <content type="text"><![CDATA[Deepmask]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[memo of combinatorial mathematics]]></title>
    <url>%2F2018%2F04%2F02%2Fmemo-of-combinatorial-mathematics%2F</url>
    <content type="text"><![CDATA[错排问题 将问题分成 第n个元素和前n-1个元素中的一个互换，其他元素自行错排 前n-1个元素错排，第n个元素和其中一个交换 $$ D_n = (n-1)(D_{n-1}+D_{n-2})$$ $$ D_n = n!(1-\frac{1}{1!}+\frac{1}{2!}...+\frac{(-1)^n}{n!})$$ 格路问题 基本问题 从（0,0）到（m,n）的路径个数 $$S = C(m+n, m)$$ 不穿过y=x（可以在线上）？ 下移对角线，求对称路径 $$S = C(n+m,m)-C(m+n,m-1)$$ 不穿过y=x（不能在线上）？ 不用下移，考虑先走（1,0）和先走（0,1） $$S = C(n+m-1,m)-C(m+n-1,m-1)$$ 环排列 人的环排列：$(n-1)!$ 珍珠：$\frac{(n-1)!}{2}$，考虑到珍珠可以翻转 可重组合 从非空集合 X={1,2,...,n} 中，每次取出 r 个元素，允许元素重复，且不计顺序 or 取r个无标志的球，n个有区别的盒子，每个盒子允许放多于一个球。 $$S=C(n+r-1,r)$$ 可重排列 从一个长度为n的集合 $s={x_1,x_2,...,x_n}$ 中，选出k个元素，集合中的每个元素可以被重复选出，即这k个元素当中允许出现重复元素，对这k个元素形成的k元有序元组进行排列 $$S = n^k$$]]></content>
      <categories>
        <category>math</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[network tricks]]></title>
    <url>%2F2018%2F03%2F30%2Fnetwork-tricks%2F</url>
    <content type="text"><![CDATA[network compression 低秩矩阵，近似原有的w矩阵，例如使用svd分解、Toeplitz矩阵配合Krylov分解近似原矩阵 参考：Exploiting linear structure within convolutional networks for efﬁcient evaluation. 剪枝，在训练结束后将不重要的神经元或滤波器去除 量化+权值共享。 通过kmeans对同一层的权值分类，每一类权值只存储其kmeans中心点，整个权值矩阵只有k个不同的值，用$logk$比特存储。 同一类权值共享一个值，在update时也保持一致 参考：Deep compression: Compressing DNNs with pruning, trained quantization and huffman coding. 结构设计。 bottleneck和1*1卷积（减少通道数，实际上就是将各个通道按不同的权值累加） 分组卷积 扩展卷积，dilated convolution，跳着卷积，扩大感受野 用小模型模仿大模型 小模型去模仿大模型的中间层和结果的输出 knowledge distillation，A Gift From Knowledge Distillation: Fast Optimization, Network Minimization and Transfer Learning，让小模型和大模型的层间关系（两层通道的内积）相同。]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[deep learning memo]]></title>
    <url>%2F2018%2F03%2F29%2Fdeep-learning-memo%2F</url>
    <content type="text"><![CDATA[CNN 卷积操作 输入层为$ Z^l$，卷积核为W，输出为$ Z^{l+1}$。 那么我们有 $$ Z^{l+1}= W* \sigma(Z^l)$$ $$ Z_{x,y}^{l+1} =\sum_{a}\sum_{b}w_{a,b} \sigma(Z^l_{x-a,y-b})$$ 有个相似的操作是互相关，cross relation $$ Z_{x,y}^{l+1} =\sum_{a}{\sum_{b}{w_{a,b}\sigma(Z^l_{x+a,y+b})}}$$ BP $$\frac{ \partial C}{\partial Z_{x,y}^l} = \sum_{x'}{\sum_{y'}{\frac{\partial C}{\partial Z_{x',y'}^{l+1}} \frac{\partial Z_{x',y'}^{l+1}}{\partial Z^{l}_{x,y}}}}$$ $$\frac{\partial Z_{x',y'}^{l+1}}{\partial Z_{x,y}^{l}} = \frac{\partial {(\sum_a{\sum_b{W_{a,b}\sigma (Z_{x'-a,y'-b}^l)}} + B})}{\partial Z_{x,y}^{l}}$$ 上式中只有$x'-a=x, y'-b=y$时导数不为0，因此带入可得 $$\frac{\partial C}{\partial Z_{x,y}^l} = \sum_{x'}\sum_{y'} \delta_{x',y'}^{l+1} W_{x'-x,y'-y} \sigma'(Z_{x,y}^l)$$ 也可以写成： $$\frac{\partial C}{\partial Z_{x,y}^l} = \sum_{a}\sum_{b} \delta_{x+a,y+b}^{l+1} W_{a,b} \sigma'(Z_{x,y}^l)$$ 这个就是$\delta$和$W$的互相关（cross correlation），和卷积差一个翻转180度，因此可以看成： $$ \frac{\partial C}{\partial Z_{x,y}^l} = \delta^{l+1}* rot180(W_{x,y}^{l+1}) \sigma'(Z_{x,y}^l)$$ 相似的可以得到 $\frac{\partial C}{\partial W^l_{a,b}}$ RCNNs RCNN 提出region proposal，利用selective search获得 在局部区域上提取feature，做前后景分类和回归 fast rcnn 将region proposal投影到最后一层feature map，不必重复提取feature 加入ROI pooling，不同大小的特征map映射到同一特征。 如何将原始图片和特征map的像素点对应起来？ 计算感受野，特征map的某一点是原始图片通过多层cnn卷积得到的，padding不影响感受野，stride影响和map size影响。 faster rcnn RPN: 抛弃selective search，提出RPN，输入固定的region，输出是region前后景判断和位置修正（第一次回归），判断为前景的region便是region proposal。 RPN loss: $$ L = \frac{1}{N_{cls}} \sum {L_{cls} (p_i, p_i^g)} + \lambda \frac{1}{N_{reg}} \sum { p_i^{g} L_{reg} (t_i, t_i^{g})}$$ 后一项是regression的loss，只计算正样本。为了确保每个正样本的anchor只对应一个ground truth box，选择超过0.7的IOU、且值最大的ground truth。 mask rcnn .. YOLO YOLO v1 将图片分割成7*7等分，对每个方格预测其类别，并预测该方格“负责”的bounding box。 网络输出为7*7*30的维度，每个1*1*30对应一个网格。 网格中前10个数为预测的两个bounding box的坐标（4位），confidence（1位）。confidence是一个示性函数和IOU的乘积。示性函数当bounding box负责一个ground truth box的学习时为1，其他情况为0。如何判断负责？每个ground truth box会选择所有bounding box中IOU最大的负责。这种做法称作bounding box predictor specialization(专职化)。 后20项为20分类，每一项对应一类的置信值。 缺点 一个网格只预测两个框，且认定两个框都是同一物体，对相近的物体和小群体检测不好 泛化能力弱 YOLO v2 batch normalization anchor box提升精度，k-means选择box大小 ... SSD 损失函数 softmax with cross entropy loss softmax: $$a_i = \frac{e^{z_i}}{\sum_k e^{z_k}}$$ cross entropy loss $$H(p,q) = \sum_i p(i)log(q(i)) = log(a_y) = z_y - log(\sum_k e^{z_k})$$ 对应还有一个概念：相对熵，也称为KL散度，表示两个分布的差异性 $$D(p||q) = H(p,q)-H(p) = \sum_i p(i)log(\frac{p(i)}{q(i)})$$]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[overlapping matrix]]></title>
    <url>%2F2018%2F03%2F28%2Foverlapping-matrix%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[eight digital games]]></title>
    <url>%2F2018%2F03%2F24%2Feight-digital-games%2F</url>
    <content type="text"><![CDATA[原题链接 八数码游戏 如图所示，棋盘分为$3\times 3$的区域，在上面放置1~8八个数字，剩下一个区域为空，空区域的周围区域可以移动到空区域处，问最少需要多少次移动能够达到如下状态： 分析 康拓展开+启发式算法解决 康拓展开]]></content>
  </entry>
  <entry>
    <title><![CDATA[procedure of jvm]]></title>
    <url>%2F2018%2F03%2F13%2Fjvm-garbage-collection%2F</url>
    <content type="text"><![CDATA[JAVA内存管理 java代码的执行过程 （盗几张图，侵删……） 我们看到，在jvm字节码运行部分存在两个分支，JIT解释器和编译器。主流的jvm系统都采用两种模式并存的技术。 JIT(just in time)解释器直接拿字节码一行一行解释，边解释边运行，对于一般代码是这个流程。 在程序运行过程中，jvm通过计数或采样找出一些热点代码块，将其编译为本地代码，每次使用时直接调用本地代码。 类加载器 内存模型 垃圾回收机制 主要用于管理堆内存 判断依据 一个对象如果不会被用到了，就会被判断为垃圾 引用计数法：记录总共被其他对象应用过多少次，当没有被对象引用时，就是垃圾。但是解决不了循环引用的情况。 根搜索算法：可以将引用关系看成一张图，从gc root开始沿着引用搜索，如果某个对象不可达了，就是垃圾 回收策略 mark-sweep(标记-清除)算法：两个阶段，会产生内存碎片 标记需要回收的对象 清除标记了的对象 copying算法：每次只使用一半的内存，使用完后把存活的复制到另一块上，剩下的全部清理掉。没有内存碎片，但可用内存减半了 mark-compact算法：标记阶段和mark-sweep一样，但清除的时候将存活的对象向一端移动，剩余空间全部回收 generational collection算法(分代收集)：分新生代、老年代和持久代 老年代特点是需要收集的垃圾较少，此外一般大对象会直接分配到老年代中。从年轻代“涅槃”的对象会放在老年代。 年轻代每次回收的垃圾很多，一般采用copying算法，不过不是对半划分，而是分三份，一个大的Eden空间，两个小的survivor空间。当回收时，将Eden和正在使用的survivor A空间存活的对象全部复制到未使用的survivor B中，清理Eden和survivor A，如此两个survivor轮换使用。如果回收剩下的存活对象survivor装不下，多余的会放到老年代中。 持久代存放静态文件，不同的jvm实现不同。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>garbage collection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linear algebra memo]]></title>
    <url>%2F2018%2F03%2F13%2Flinear-algebra-memo%2F</url>
    <content type="text"><![CDATA[线性代数备忘录 行列式 $$det(AB) = det(A)\times det(B)$$ $$det(2I)=2^n det(I)=2^n$$ 特征值和特征向量 $$A\alpha=\lambda \alpha$$ 求解 $det(A-\lambda)=0$ 得到特征值，再回代求特征向量。 矩阵的行列式是所有特征值的乘积，而迹$Tr(A)$是特征值的和。 可逆矩阵必能对角化 二次型 二次型转化为标准型 正定矩阵 特征值全为正数。对应的二次型恒为正 半正定：大于等于0 对于任意对称阵B，E为单位矩阵，$aE+B$在a充分大时为正定矩阵 对于实对称矩阵A，等价命题 A是正定矩阵； A的一切顺序主子式均为正； A的一切主子式均为正； A的特征值均为正； 存在实可逆矩阵C，使A=C′C； 存在秩为n的m×n实矩阵B，使A=B′B； 存在主对角线元素全为正的实三角矩阵R，使A=R′R 存在正定矩阵B，$A=B^k$ 矩阵求逆 代数余子式 --&gt; 伴随矩阵 + 求det 可逆矩阵==非奇异矩阵，可以分解为若干初等矩阵(指由单位矩阵经过一次三种矩阵初等变换得到的矩阵)的乘积 实对称矩阵 各个元素都是实数，转置与本身相同 实对称矩阵A的不同特征值对应的特征向量是正交的。 实对称矩阵A的特征值都是实数，特征向量都是实向量。 n阶实对称矩阵A必可对角化，且相似对角阵上的元素即为矩阵本身特征值。 若$\lambda_0$具有k重特征值 必有k个线性无关的特征向量，或者说必有秩$r(\lambda_0E-A)=n-k$，其中E为单位矩阵。 若秩$r(A)=k$，则$\lambda=0$为A的n-k重特征值 other…… 对角矩阵可以和任何矩阵乘法交换位置 $|A{-1}|=|A|{-1}$ 矩阵与方程解的关系：$Ax=b$ A满秩：唯一解 $r(A)&lt;r(A|b)$：无解 $r(A)=r(A|b)$：无数解]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>memo</tag>
        <tag>linear algebra</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[machine learning memo]]></title>
    <url>%2F2018%2F03%2F12%2Fmachine-learning-memo%2F</url>
    <content type="text"><![CDATA[logistics regression $$P(Y=1|x)=\frac{exp(wx+b)}{1+exp(wx+b)}$$ $$P(Y=0|x)=\frac{1}{1+exp(wx+b)}$$ 极大似然估计，利用梯度下降计算得到$w,b$的值，代入公式判断新实例的类型。 SVM 优化函数--最大间隔 $\frac{2}{||w||}$ $$min_{w,b} \frac{1}{2}||w||^2$$ 给定：$y_i(wx_i+b)-1\ge0$ 引入拉格朗日乘子，再求对偶问题…… 核函数…… 决策树 本质上就是通过递归的选择用于分类的特征拟合训练数据。特征选择的依据是信息增益(infomation gain)，每次选择信息增益(比)最大的。 熵（entropy），随机变量的不确定性越大，entropy就越大。 $$H(D)=-\sum{p_i logp_i}$$ 条件熵 $$H(D|A)=\sum{P(A=a_i)H(D|A=a_i)}$$ 信息增益指的是在没有特征A的情况和给定特征A的情况下的信息熵之差。 $$g(D,A)=H(D)-H(D|A)$$ naive Bayes 朴素贝叶斯算法，期望风险最小化==后验概率最大化 贝叶斯算法，防止出现概率值为0的情况 EM算法 属于生成模型 基本步骤 明确隐变量，写出完全数据的对数似然函数 E步(estimate,计算期望)：确定 $$Q( \theta | \theta^i) = E_z[P(Y,Z| \theta )|Y,\theta^{i}]$$ M步(maximization,对Q函数求极大值)：对$Q( \theta | \theta^i)$求极大值，得到$ \theta^{i+1}$，重复2-3步 $Q( \theta|\theta^i)$是关于对数似然函数$L( \theta)$的一个下界，利用Jensen不等式的出来的。对Q函数求极大，则可以保证在每个迭代过程中，$L( \theta^{i+1})$总比$L( \theta^i)$大。 图模型 HMM 判别式模型 算法 前向算法和后向算法：用于评估问题，计算给定的观测数据在模型下的概率。 维特比算法：给定观察序列，求最可能的隐状态序列，实际上就是求联合概率最大的状态。 Baum-welch算法：已知观测序列、隐状态个数，计算状态转移概率和发射概率。实际上就是一种em算法，迭代的求隐变量的期望和最大似然概率。 CRF ... 指数族分布 $p(y;\eta)= b(y)exp(\eta^T T(y) - a(y))$ 其中，$a(y)$为一个归一化因子，保证概率的积分为1；$T(y)$为充分统计量，一般为y；$\eta$为nature parameter，改变它的值决定了同一类型不同的指数族分布。 伯努利分布 $p(x;\theta)=\thetax(1-\theta){1-x}$；转换为指数族分布后，$\theta = \frac{1}{1+e^{-\eta}}$，实际上就是sigmoid函数。 ... 3个假设 一般对问题我们有三个假设： 给定x和参数$\theta$，y符合指数族分布 我们学习的目标函数为 $h(x)=E[y|x]$ $\eta = \theta^Tx$ 基于这三个假设，我们可以设计$T(y)$，假设一个指数族分布，并将$\eta = \theta^Tx$带入。 一些问题 生成模型与判别模型？生成模型先求联合概率分布$P(X,Y)$，再求$P(Y|X)$，模型表示了给定输入X产生Y的生成关系；判别方法直接学习$P(Y|X)$或者一个决策函数$f(x)$。 支持度和置信度： 支持度：同时购买A和B商品的次数/总交易次数 置信度：同时购买A和B商品的次数/购买A的次数]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>memo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++ basic]]></title>
    <url>%2F2018%2F03%2F11%2Fc-basic%2F</url>
    <content type="text"><![CDATA[参考材料：csdn 定义与声明： 定义告诉编译器，“在这里建立变量或函数”，并且为它们分配内存空间。 1234int i; //即定义又声明extend int i; //仅仅声明变量void a(int i); //仅仅声明函数void a(int i)&#123;&#125;; //定义函数 声明告诉编译器“这个函数或者变量可以在哪找到，它的模样像什么”。 const，被const修饰的成员函数不改变类的成员变量 引用与指针 引用是变量的一个别名，内部实现是只读指针 引用不能为NULL，指针可以为NULL “sizeof(引用)&quot; = 指向变量的大小 ， &quot;sizeof(指针)&quot;= 指针本身的大小 string类的构造函数、拷贝构造函数和析构函数 explicit，修饰类构造函数，表明该构造函数是显示的（不能对参数进行隐式类型转换）, 而非隐式的, 跟它相对应的另一个关键字是implicit, 意思是隐藏的,类构造函数默认情况下即声明为implicit(隐式)。]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>memo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++ friend machanism]]></title>
    <url>%2F2018%2F03%2F11%2Fc-friend-machanism%2F</url>
    <content type="text"><![CDATA[友元 友元函数 定义在类外面的函数，可以访问类的成员。 12345678910111213141516171819#include &lt;iostream&gt;using namespace std;class A&#123;public: //该函数是友元函数的声明 friend void set_show(int x, A &amp;a);private: int data;&#125;;//友元函数定义，为了访问类A中的成员（private）void set_show(int x, A &amp;a)&#123; a.data = x; cout &lt;&lt; a.data &lt;&lt; endl;&#125; 友元类 友元关系不能被继承、传递和取反方向 12345678910111213class A&#123;public: friend class C; //这是友元类的声明private: int data;&#125;;class C //友元类定义，为了访问类A中的成员&#123;public: void set_show(int x, A &amp;a) &#123; a.data = x; cout&lt;&lt;a.data&lt;&lt;endl;&#125;&#125;; 友元成员函数 和友元函数差不多]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[cast operators]]></title>
    <url>%2F2018%2F03%2F11%2Fc-memo%2F</url>
    <content type="text"><![CDATA[cast operators static_cast&lt;new_type&gt;() 1234 //static_cast不能转换掉expression的const、volatile、或者__unaligned属性。 const int g = 20;int *h = static_cast&lt;int*&gt;(&amp;g);//编译错误，static_cast不能转换掉g的const属性 dynamic_cast&lt;new_type&gt;() 有类型检查，与static的不同在于，转型失败会返。运行成本较大。 const_cast&lt;new_type&gt;() 该运算符用来修改类型的const(唯一有此能力的C++-style转型操作符)或volatile属性。除了const 或volatile修饰之外， new_type和expression的类型是一样的。 reinterpret_cast&lt;new_type&gt;() new_type必须是一个指针、引用、算术类型、函数指针或者成员指针。它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针。可以用在存hash函数中。 12345678910111213141516171819 #include &lt;iostream&gt;using namespace std;int output(int p)&#123; cout &lt;&lt; p &lt;&lt;endl; return 0;&#125;typedef int (*test_func)(int );//定义函数指针test_funcint main()&#123; int p = 10; test_func fun1 = output; fun1(p);//正确 test_func fun2 = reinterpret_cast&lt;test_func&gt;(&amp;p); fun2(p);//...处有未经处理的异常: 0xC0000005: Access violation return 0;&#125;class C : public A, public B &#123;&#125;;C c;printf("%p, %p, %p", &amp;c, reinterpret_cast&lt;B*&gt;(&amp;c), static_cast &lt;B*&gt;(&amp;c));// static_cast会自动将指针移至父类B的元素上，而reinterpret_cast不会]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>memo</tag>
        <tag>类型转换</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[face recognition]]></title>
    <url>%2F2018%2F02%2F07%2Fface-recognition%2F</url>
    <content type="text"><![CDATA[face detection/alignment face]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[773 Sliding Puzzle]]></title>
    <url>%2F2018%2F01%2F29%2F773-Sliding-Puzzle%2F</url>
    <content type="text"><![CDATA[题目链接 description 对于一个 $2 \times 3$的长方形方格，分别填上$1,2,3,4,5,0$。格子中的$0$可以和上下左右的方块交换位置。给定一个填上数字的方格，例如： 4 1 3 2 5 0 求问最少经过多少交换能到达： 1 2 3 4 5 0 小时候其实大家应该都玩过，类似拼图的东西，英文叫做sliding puzzle wiki 思路 最开始考虑能不能找到什么策略能够保证找到的路径是最短的，没想到…… 那么暴力搜索呢？ 可以发现，搜索空间并不大，总共6个格子，$6!=720$种可能。因此很简单，BFS或者DFS搜索即可。。。 一些小优化 如果对于每个乱序的方格，我们都从它开始搜索到达 123450 的次数。但是，如果考虑多次查询的情况，我们可以从 123450 开始搜索，直到找到原始的方格。我们可以顺便记录下BFS遍历到的所有状态，方便下次查询。 所以，这个题目由于搜索空间比较小，其实还是很简单的。。。 code github]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tensorflow备忘录]]></title>
    <url>%2F2018%2F01%2F29%2Ftensorflow-memorandum%2F</url>
    <content type="text"><![CDATA[Tensor main types Variable constant placeholder SparseTensor basic usages 12345678910111213141516171819202122# inita0 = tf.Variable(3.0, tf.float64)a1 = tf.Variable([3.0, 3.1], tf.float64)# ranktf.rank(a1) # output 1# slicematrix[1,2]matrix[2] # 2nd linematrix[:,3] # 3rd column# shapematrix.shape # a tensorshape object# reshapetf.reshape(matrix, target_shape)# casttf.cast(matrix, tf.target_type)# evalmatrix.eval() # compute the graph and get the value Variable a special tensor, constant in multiple session.run() calls 1234567891011121314151617181920# initmy_local = tf.get_variable("variable name", shape=[shape], dtype=tf.type, initializer=init_op)# set not trainablemy_local = tf.get_variable("my_local", shape=(), collections=[tf.GraphKeys.LOCAL_VARIABLES])# variables should be placed on parameter serverswith tf.device("/device:GPU:1"): v = tf.get_variable("v", [1]) # initialization dependencyw = tf.get_variable("w", initializer=v.initialized_value() + 1)# scopewith tf.variable_scope("conv1"): weights = tf.get_variable("weights", kernel_shape, initializer=tf.random_normal_initializer()) # reuse scope.reuse_variables() ... Estimator pre-made estimator input function 123def input_fn(dataset): ...# manipulate dataset, extracting feature names and the label return feature_dict, label feature columns 12345# Define three numeric feature columns.population = tf.feature_column.numeric_column('population')crime_rate = tf.feature_column.numeric_column('crime_rate')median_education = tf.feature_column.numeric_column('median_education', normalizer_fn='lambda x: x - global_education_mean') init estimator 123estimator = tf.estimator.Estimator.LinearClassifier( feature_columns=[population, crime_rate, median_education], ) training, evaluation or prediction 1estimator.train(input_fn=my_training_set, steps=2000) custom estimator The only difference from pre-made estimators is that the mode function should be implemented by yourself. input function, similar to pre-made ones feature columns... model function 1234567# return tf.estimator.EstimatorSpec object# see https://www.tensorflow.org/api_docs/python/tf/estimator/EstimatorSpecdef my_model_fn( features, # This is batch_features from input_fn labels, # This is batch_labels from input_fn mode, # An instance of tf.estimator.ModeKeys params): # Additional configuration init estimator 123456789classifier = tf.estimator.Estimator( model_fn=my_model_fn, params=&#123; 'feature_columns': my_feature_columns, # Two hidden layers of 10 nodes each. 'hidden_units': [10, 10], # The model must choose between 3 classes. 'n_classes': 3, &#125;) train, evaluation and prediction]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>deep learning</tag>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最近接到的关于动漫图像识别的任务调研]]></title>
    <url>%2F2018%2F01%2F27%2Fcomics-project-research%2F</url>
    <content type="text"><![CDATA[classification tensorflow官方提供了在imagenet上表现比较好的一些框架，例如inception、resnet...并且也给出了pre train的权重。 tensorflow也有工具从keras迁移model过来。keras上除了提供了常见的模型之外，最近的densenet、mobilenet都有了。 object detection faster rcnn deformable convolutional network msra cver mxnet apache mxnet demo mxnet keypoint cmu openpose c++,caffe ai challenger#5 pytorch stuff(background) detection semantic segmentation instance segmentation mask rcnn matterpot's implementation]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[cuda coding series 2]]></title>
    <url>%2F2018%2F01%2F23%2Fcuda-series-2%2F</url>
    <content type="text"><![CDATA[一些术语 host 主机端，即CPU Device 设备端，即GPU kernel 核函数，数据并行函数 标识符 global device threadIdx.x 线程ID 线程的层次 grid(公司) --&gt; block(科室) --&gt; thread(员工) 线程块之间彼此独立运行，块内线程可以同步 线程不可以写constant memory 函数 1234cudaMalloc((void**)&amp;p, size)// host与device的内存拷贝cudaMemcpy() 算法框架 allocate memory 分配内存 cpu --&gt; gpu拷贝数据 compute on device -- 实现kernel free memory]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[cuda coding series 1]]></title>
    <url>%2F2018%2F01%2F23%2Fcuda-series-1%2F</url>
    <content type="text"><![CDATA[CPU structure 几个常识： cpu运行桌面应用，轻量级进程、少量线程，大量分支和交互，大量存储器访问，只有1%的指令在运算上 cpu芯片大部分面积是三级缓存和io相关的接口，只有小部分是计算单元 cpu发展遇到的‘墙’：能量（散热等），存储器（带宽跟不上） GPU structure shader core， ALU单元，完成指令流，一个核可以加入多个alu单元。 同一个核内部只有一个取址译码单元，因此只能步调一致的做工作，遇到分支不能并行。 以上成为stall，通过多个任务来回切换hide stalls work distributor，工作分配 Fermi架构 一个计算单元（SM）分成两组ALU Kepler架构 一个SM中多个小组。。。 与CPU（的L3 cache）不同，GPU的存储器放在外面， 依然存在访存慢的问题，因此带宽很重要 GPU线程组织架构 一个kernel具有大量的线程 线程被分成线程块block，一个block内部的线程共享 shared memory 若干block组成grid，kernel启动 线程和硬件的对应关系 线程 -- ALU单元 -- 线程私有的local memory block -- sm单元 -- block的shared memory grid -- gpu device -- 设备共有的global memory ####SIMT single instruction multiple thread GPU版本的SIMD 大量线程模型获得高度并行，线程切换来hide stalls]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[最大子矩阵]]></title>
    <url>%2F2018%2F01%2F15%2Fmax-submatrix%2F</url>
    <content type="text"><![CDATA[问题：给定一个$N \times M$的矩阵A和一个整数K，要求找到最大（元素最多）的子矩阵，其元素总和不超过K？ 解法一： 一次dp求出点$(0,0)$到$(x,y)$的子矩阵的元素和，于是，对于任意$(x_1,y_1)$到$(x,y)$的子矩阵的元素和可以通过加减面积求出来，遍历所有可能情况，总的时间复杂度为$O(N^2 \times M^2)$ 解法二： 考虑一个子问题，即第$i$行到第$j$行这$j-i$行组成的子矩阵中如何找到和小于K的最大矩阵？解法一等价于遍历所有可能的列组合，找到最大的，每次问题的时间复杂度为$O(M^2)$。如果能找到时间复杂度更小的，这个算法就可以更优。 首先计算两个矩阵 $sum[k][l]$，第l列中第1行到第k行的元素总和。 根据$sum$数组，给定第$i$行到第$j$行，计算$temp[k]$，为第1列到第k列组成的子矩阵的元素和。 子矩阵从第t列出发，我们向后找离他最远的一列，使得对应的子矩阵元素和小于K。如果直接遍历，问题又回到了平方的复杂度。容易发现，对于后面任意一列$t_1 (t_1 &gt; t)$，若$t_1$满足要求，且$temp[t_i] &lt; temp[t_1]$，则$t_i$必然也满足要求。 那么，我们只需要以进出栈的方式记录每个最低点所在的位置，再查找最远的满足条件的点，对应的子矩阵便是最大子矩阵。记录最低点需要一遍扫描整个数组，查找可以使用二分，最终时间复杂度在$Mlog(M)$ 因此总的复杂度为$O(N^2MlogM)$。 附：做了一些题发现，遇到子矩阵求和的题目，固定住行，尝试降低列搜索的复杂度有时候会很有效。]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[最优比例生成树]]></title>
    <url>%2F2018%2F01%2F10%2Fbest-ratio-spanning-tree%2F</url>
    <content type="text"><![CDATA[问题是这样的，一个图(direct or undirect)中每条边不仅有长度(length)这个属性，还有花费(cost)属性，要求在所有可能的生成树中找到一棵 总长度/总花费 最大的一个。 这样的树称为最优比例生成树，例题可以看 POJ 2728。这类问题是典型的使用01分数规划解决的问题。 01分数规划 给定两个数组，$a[i]$表示取i的收益，$b[i]$表示取i的代价，选择一部分元素，使单位收益的代价最小，即 $$max{\frac{\sum{a[i]x[i]}}{\sum{b[i]x[i]}}}$$ $x[i]=1$表示选择i元素，$x[i]=0$表示不选。 设函数 $$f(l) = \sum{x[i](a[i]-l\times b[i])}$$ 令$d[i]=a[i]-l\times b[i]$，则 $$f(l)=\sum{d[i]x[i]}$$ 我们固定l值，将$f$函数看做方案$x[1...n]$（记为X）的函数，若我们找到一个X，使得$f&gt;0$，那我们有 $$f=\sum{x[i](a[i]-l\times b[i])}&gt;0$$ $$\frac{\sum{a[i]x[i]}}{\sum{b[i]x[i]}}&gt;l$$ 即当前方案的ratio比$l$大。由于$f$随$l$单调递减，当$l$大到一定程度的时候，符合条件的解就不存在了，临界值就是ratio的最大值。 我们可以尝试不同的$l$值，查找不等式的解，根据解情况更新$l$值迭代得到最终解。 具体可以通过二分或者Dinkelbach算法来求。 传说中的Dinkelbach's algorithm由Dinkelbach(1967)提出来，用来解决凸非线性分数优化(convex nonlinear fractional programming)问题，但是只用于处理连续变量的优化。主要思想就是通过解决一系列小的优化问题最终逼近最优解。后人将之拓展到mixed-integer，即包含离散和连续值(例如01分数规划用到的)，并且被证明了optimality和convergence。附上一篇论文 Dinkelbach算法在01分数规划问题下的大概框架就是： 设置一个较小值$l$ 计算$f$在$l$值下的最大值，及对应的$x[1...n]$ 根据这个$x[1..n]$值计算ratio，更新$l$值。迭代23步，直到$f$值等于0(理想结果)或小于一个tolerance $\epsilon$ 这种方法会使$l$朝着一个方向逼近最优值，实际性能比二分法好不少。 最优比例生成树 回到原问题，我们需要找到一个生成树(对应01问题的解)，使比例最大。 那么，对于每次迭代的$l$值，我们建立边权重为$d[i]$的图，找到权重和最大的生成树，此时$f$去最大。若$f$值小于0，意味着不存在解，下一次迭代$l$值应该减小；若$f$值大于0，意味着这个生成树便是一个解，更新$l$值继续迭代。必然存在一个临界状态，得到的生成树使得$f$值刚好为0，便是目标解。 找权重最大的生成树用Prime或Kruskal算法即可，其他没什么区别。]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[some notes]]></title>
    <url>%2F2018%2F01%2F08%2Fidiot-notes%2F</url>
    <content type="text"><![CDATA[隔板法：把n个相同元素分成k个不同的组(插入k-1个板) $C_{n-1}^{k-1}$，即n-1个空，选k-1个空放入隔板，剩下的空放元素。类似的，若要求每个空可以为空，人为添加k个球，再求。习题 c++ rand()默认将种子设为1，一个进程下多次调用会得到不同的随机值，但是进程多次运行，得到的结果是一样的。]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Suffix Automaton]]></title>
    <url>%2F2017%2F12%2F27%2Fsuffix-series%2F</url>
    <content type="text"><![CDATA[后缀自动机 网上有很多关于后缀自动机的文章，我这边就简单记录一下： suffix_automata 不过是俄文…… 后缀自动机详解—CSDN 这篇对原理讲的还算清楚，给了代码模板 后缀自动机学习总结 想看例子的这个比较好，给出了 $ACADD$ 构成自动机的完整过程 usage 从根节点出发，任一的路径对应一个子串 节点i可以接受的状态相互呈后缀关系，且长度为一个区间，即$[maxlen, minlen]$ 节点i的父亲所能接受的所有子串是节点i能接受的子串的后缀 给几个应用的习题 给一个字符串，每次可以将第一个字符移到最后面，问所能得到的字典序最小的字符是什么？例如BBAAB，最小是AABBB。提示：对字符串S，创建SS的自动机 求两个字符串的最长公共子序列？我们知道常见的思路是dp，时间复杂度在$O(AB)$。提示：对字符串A创建自动机，依次读取字符串B，求$B_j$之前最长有多少字符和A匹配，时间复杂度创建自动机O(A)，搜索O(B) 求子序列s在A中出现的次数？提示：在子串s对于的状态S下，逆向遍历后缀链接，求子孙节点总数 求A的所有子序列中字典序第$k$个是？提示：对字符串A创建自动机，记录从状态s开始能接收的总子序列数，再用dfs搜索第k个 变体：区分不同位置的相同子序列？ OJ 找到子串在字符串中第一次出现的位置？提示：在构建自动机时，记录子串第一次出现的位置，等于状态的$len-1$，clone时将其等于clone的那个q的值 code 找到子串在字符串中所有位置？ 提示：与4类似，先求出第一次出现位置，逆向遍历所有后缀链接，指向的状态的首次出现的位置都是子串能够出现的位置 code 一些思考 后缀自动机的每个节点对应一个终点等价类，即right集合。例如状态v对应一组长度从[minlen, maxlen]的子串集合，这些子串在字符串中出现的位置的终点是完全相同的。 状态v中的子串第一次出现的位置便是状态第一次添加的位置。逆向遍历后缀链接可以得到某子串所有出现的位置。 后缀数组 这里只讲一下倍增算法。code 倍增算法的主要思想就是，如果我对所有后缀的前$2k$进行排序，那么对前$2{k+1}$进行排序时，后缀$s[i]$和$s[j]$若前$2k$个字符相同，则只需要检查$s[i+2k]$和$s[j+2^k]$的顺序即可。 核心还是使用了短后缀必然是长后缀的后缀这样的性质简化了判断。 具体实现中，我们从$k=0, 2k=1$开始，进行桶排序，对每个后缀标号，相同前缀的后缀的标号相同。从$k$到$k+1$的迭代中，先根据后缀的$2k+1...2{k+1}$位的排序（直接根据前$2k$位的排序结果），然后依次往$2k$的桶里面填，就得到了$2{k+1}$的排序结果。最后要注意更新标号。]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[472&139 about word concatenation matching]]></title>
    <url>%2F2017%2F12%2F26%2Fleetcode-472-139-word-concatenation%2F</url>
    <content type="text"><![CDATA[题目 139. Give you a string and a string array: s = 'leetcode' array = ['leet', 'code'] Now, tell me weather string $s$ can be concatenated by words in $array$? 472. Give you a string array: array = [&quot;cat&quot;, &quot;cats&quot;, &quot;catsdogcats&quot;, &quot;dog&quot;, &quot;dogcatsdog&quot;, &quot;hippopotamuses&quot;, &quot;rat&quot;, &quot;ratcatsdogcat&quot;] Now, tell me which word can be concatenated by other words except itself. Note: the same words can be used multiple times. 分析 These two question is similar. There are mainly two kind of solutions for both. 1. DP solution Define a bool array s[...] to be whether the prefix of a word can be concatenated. For example, for word w, if s[k] is true, it means that w[1...k] can be concatenated by words in the $array$. We split w[1...k] in any positions to find whether there exists one position t, where w[t...k] is in the $array$ and s[t] is true. So the complexity for this function is $O(n^2)$, ignoring the time of map search. 2. Trie First, construct the Trie tree using all the words in the array. Then, DFS the target word. When it come to a leaf node and the target word still has chars, researching the remaining chars from the root. ....]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[123. Best Time to Buy and Sell Stock 3]]></title>
    <url>%2F2017%2F12%2F26%2Fleetcode123-Best-Time-to-Buy-and-Sell-Stock-3%2F</url>
    <content type="text"><![CDATA[题目 给你一个数列，每个数字代表一个时刻的股票价格，求最多两次交易的情况下，能获得的最大收益。 题解 由于最多两次交易，定义4个状态： 只买入一次 买入一次，卖出一次 买入两次，卖出一次 买入两次，卖出两次 子问题结构是，我们已知前$i$个时刻 1~4 个状态下的最大收益，更新前$i+1$时刻的最大收益。例如： 前$i+1$个时刻只买入一次的最大收益为前$i$时刻只买一次的最大收益和只买$i+1$时刻的收益的最大值。 前$i+1$个时刻买入一次，卖出一次的最大收益为前$i$时刻只买入一次并在$i+1$时刻卖出的收益和*前$i$时刻买入一次，卖出一次的最大收益($i+1$时刻啥都不做)*的最大值。 code 。。。]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[R-cnn]]></title>
    <url>%2F2017%2F11%2F07%2Frcnn%2F</url>
    <content type="text"><![CDATA[R-cnn ... Fast R-cnn Fast R-cnn相比于R-cnn有两个改动。 对原始图片先提取特征，在特征图上用SS获取推荐的region。相比于RCNN先提取region，再对每个region提取特征，Fast R-cnn对每张图片只需要提取一次特征。但是带来的问题是，在特征图上推荐的bbox大小不一，需要resize到一个尺寸才能进入下一层网络。如果简单的使用resize(R-cnn中的做法)，在cnn中不能做反向传播，因此作者设计了新的层——RoI pooling，做法就是将ROI等分为$n \times m$个区域，对每个小区域进行pooling，这样对于任何大小的ROI特征，都能转化为$n \times m$个特征。 使用softmax进行分类，R-cnn使用SVM。 Faster R-cnn 前面两个RCNN使用Selective Search来获取ROI，但是SS算法的效果还不是很好，Faster R-cnn提出使用一种神经网络提取ROI，即Region Proposal Network(RPN)，而其他部分和Fast R-cnn相同。 RPN先根据这个特征图，在图上选择一些点设置锚(anchor)框作为初始ROI，经过Conv网络分成两个分支，分别执行两个任务：框的微调(bounding box regression)和分类。分类的任务在于判断这个初始ROI是背景还是前景(即我们要识别的物体)。RPN得到最终的训练结果后，只将判定为前景的BBox输出。 SSD Single Shot MultiBox Detector 单发多框检测器 SSD将region proposal和分类同意成一个步骤进行，即“单发”。这样模型更简单、更快。 主要有两点思路： 对Conv提取的特征图直接使用$n+1$个分类器分别判断是n个类别的物体和背景。具体实现是，特征图经过一个$a\times(n+1)$个channel的$3\times3$卷积层(a代表每个像素点的anchor个数)，结果的一个像素点点对应特征图对应点在某一个anchor、判断某一个类别时的特征。 这样的结构一层一层往上叠，越往上特征图越小，实现多尺度预测的效果。这种“金字塔”式的结构在后来的FPN上也有体现。]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Abbreviations in Machine Learning]]></title>
    <url>%2F2017%2F10%2F31%2Fsome-abbreviation-in-ML%2F</url>
    <content type="text"><![CDATA[IoU AP mAP]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mel-Frequency Cepstral Coefficient]]></title>
    <url>%2F2017%2F09%2F22%2FMel-Frequency-Cepstral-Coefficient%2F</url>
    <content type="text"><![CDATA[The mel-frequency cepstrum(MFC) is popular in sound processing. Mel-Frequency cepstral coefficients (MFCC) are coefficients that collectively make up an MFC. As the name suggests, MFC consists of two main parts: Mel frequency and cepstrum. Mel Frequency Analysis Mel-Frequency analysis is based on the finding of human perception experiments that human ear acts as filters, which is more sensitive to sound in low frequency than high frequency. The mel-frequency function maps the linear frequency space, which is collected by audio devices, to a nonlinear space closer to human perception. $$mel(f) = 2595 \times log_{10}{(1+ \frac{f}{700})}$$ cepstrum analysis Suppose the speech spectrum as below: The arrows point out the dominent frequencies in the spectrum, which carry the identity of the sound. These peaks make up an smooth curve, or envelope, of the spectrum, and the spectrum can be seperated as two parts, envolope and detail. Denote the total spectrum is X[k], the envolope is H[k] and detail is E[k]. We have (why??) $$X[k] =H[k] \times E[k]$$ Take the logarithms both sides: $$log{X[k]} = log{H[k]}+ log{E[k]}$$ The figures of these functions are shown below: Our goal is to extract the envolope from the spectrum. As is shown in charts above, if we treat the spectrum as a wave, the envelope corresponds to the low frequency part and details corresponds to high frequency part. So we take the FFT of the spectrum, which is named as inverse FFT(IFFT). Then we have the spectrum of spectrum : $$x[k]=h[k]+e[k]$$ To get the envolope, we just put it through a low pass filter and transfer back to a spectrum. summary The total progress is as follows: transfer the original audio to spectrum by FFT map it to Mel-frequency scale get logarithm of the spectrum X[k] compute the 'spectrum of spectrum' x[k] by IFFT filter the high frequency part and transfer it back to a spectrum For speech synthesis task, we can get the MFCCs of two speech segments and join at the point that minimize the Euclidean distance of them. For speech recognization, MFCC are used as good features to feed to recognition models, such as nerual networks. see also cmu slides 03 mfcc]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[speech of Micheal Jordan]]></title>
    <url>%2F2017%2F09%2F12%2Fmicheal-i-jordan-speech%2F</url>
    <content type="text"><![CDATA[machine learning = statistics + optimization data science = machine learning + system covex optimization smooth --&gt; unsmooth differentiate --&gt; subgradient Lipschitz function Nesterov acceleration strong convex gradient descent is dimension-independent stocahstic gradient descent SAGA, SVRG and SCSG Y. Nesterov's book how to proof gradient descent blog: off the convex path -- Chi Jin statistics frequency is more about analysis and baye sian is more about design. frequency statistics think of many datasets, but beyesian statistics only stick to one dataset, the truth. Boncheron lugosi and Massart's book Bootstrap randomly choose data from dataset to compose different datasets. Efron &amp; Tibshirani's book about bootstrap Aadityn Ranmdas Berkeley -- false discovery rate(FDR)]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Audio classification]]></title>
    <url>%2F2017%2F09%2F07%2Faudio-classification%2F</url>
    <content type="text"><![CDATA[Content analysis for audio classification and segmentation. Lie Lu et al. propose a robust approach to classify and segment an audio stream. They use methods based on KNN and LSP-VQ to segment speech and non-speech part, and then divide the non-speech part to music, environment and silence. pdf Content-based audio classification and retrieval by support vector machines. Guodong Guo and Stan Z Li use SVM with binary tree recognition strategy to tackle audio classification problem, and propose a new metric, called distance-from-boundary for audio retrieval. www Classification of audio signals using SVM and RBFNN. P Dhanalakshmi et al. extract some acoustic features from audio and put them into a SVM and RBFNN to do classification jobs. []]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Basic economics]]></title>
    <url>%2F2017%2F09%2F06%2Feconomics%2F</url>
    <content type="text"><![CDATA[Microeconomics basic concept of demand 市场的分类 good markets intermediate goods and service factor markets, eg labor, land... capital markets demand: willingness and ability of consumers to purchase goods. law of demand: 价格下降，需求增加... demand fuction: 价格、收入、互补品价格等的函数 demand curve: demand function的反函数 需求线的移动 shifts in demand curve 整个需求线的移动 increase in income price of related goods: substitutes and complements tastes expectation, 未来收入的预期 number of buyers, 更多的消费者会广而告之，增加demand movements along demand curve 需求线上的移动 aggregate demand curves: 直接相加，保持P相同 basic concepts of supply supply: willingness and ability of sellers to purchase goods. law of supply supply function: 受到价格、劳动力工资等影响 supply curve ... 供应曲线的移动 ... input prices 原材料价格 technology expectations number of sellers, 越多供应就越多 aggregate supply curves ... market equilibrium 市场均衡，某一个价格下供给和需求相同 partial equilibrium 局部均衡，只分析价格对供应和需求的影响 general equilibrium 一般均衡 ，将所有因素都考虑在内 稳态 stable equilibrium 价格高于均衡价，市场出现供过于求，低于时供不应求，则是stable unstable equilibrium 高于时供不应求，低于时供过于求 auction 拍卖分类 拍卖物品： common value auction 共有价值拍卖，winner's curse赢家诅咒，报价超过实际价值 private value auction 对不同竞拍者来说，价值不一样 拍卖过程： first price sealed bid auction 首价密封拍卖，相互不知道报价，最高报价者胜。最优报价低于每个人的保留价 second price sealed bid auction 次价密封拍卖(vickrey auction 维克瑞拍卖)。报价最高者胜，以第二高的价格购买。最优报价等于保留价 ascending price auction 出价逐升 英式拍卖 descending price auction 出价逐降 荷式拍卖 传统荷式拍卖，每个人以自己接受的价格购买 修正荷式拍卖，单价拍卖，最终所有人付的是相同的，取最低价 美国国债拍卖 demand elasticity price elasticity of demand 价格弹性，价格发生1%变化时，需求发生多少百分比的变化。不同点的弹性不一样，相同的区间不同的方向也不一样。 arc method 弧弹性，计算平均价格的百分比 在需求线上，弹性越来越小 unit elastic demand 单元弹性，弹性=1 elastic demand 弹性&gt;1 inelastic demand 弹性&lt;1 完全弹性 水平线 完全不弹性 竖直线 factor of elasticity portion of income spent on good, 比重越大，弹性越大 availability and closeness of substitutes, 有替代品，弹性变大 time since the price change elasticity vs total revenue: 收入的百分比变化约等于价格的百分比变化+需求的百分比变化，转化为弹性可知： 当elastic时，降价提升总收入 当inelastic时，降价降低总收入 income elasticity of demand 收入弹性，当收入发生1%的变化时，需求的变化百分比 normal good 正相关，例如苹果手机 inferior good 低档商品，反相关，例如方便面 cross-price elasticity of demand y商品的价格变化对x的demand的影响 substitute，替代品，正相关，例如高铁与飞机 complements，互补品，反相关，例如汽油与汽车 consumer and producer surplus 消费者剩余: 实际付的价格和愿意付的最高价的差距，最高价即需求线上对应的点 生产者剩余: 实际价格-愿意接受的最低价，由供应商品的边际成本决定 总剩余: 消费者剩余+生产者剩余 = total value - total variable cost supply curve == marginal cost demand curve == marginal benefit 在均衡时的价格处，剩余取到最大化 面积的计算 market inference 市场预测 ####deadweight loss(DWL) 无谓损失，没有实现剩余最大化的损失 价格管制 price floor 价格下限，高于均衡价 eg 最低工资 impact 消费者寻找substitution price ceiling 设置价格上限，低于市场均衡价 要能找到图中的面积 impact long waiting period to purchase sellers discriminate 生产商歧视消费者 sellers take bribes 生产商收贿 sellers lower quality 由于价格低，质量下降 black market tax unit tax 单位税 on buyers, 消费税，使得需求线向左/下移动，总剩余(c+e)损失 on sellers, 使得供给线向右/上移动，总剩余(c+e)损失 effect statutory incidence 法定归宿 actual incidence 实际归宿，双方一起承担 elasticity 弹性，影响生产者和消费者承担税收的大小。弹性大，承担的税小，反之... 需求线越平，弹性越大 供给线越平，弹性越大 utility theory and indifference curve consumer choice theory: 消费者选择理论 complete preferences，消费者可以明确判断商品组合的优先度 transitive preferences，传递偏好，不等号的传递性 non-satiation 无饱食假设 utility theory 效用理论，效用函数 indifference curve: 效用无差异曲线，线上任意一点的效用相同 曲线离原点越远，越高越好 对于同一个消费者，无差异曲线不相交 向下倾斜 convex，凸的，diminishing marginal utility（递减的边际替代率），因为随着一个商品越来越多，边际效用越来越小 marginal rate of substitution (MRS) 边际替代率 无差异曲线上，两个商品数量变化的比例 不同人的无差异曲线可能相交，因为不同消费者偏好不同。 budget constraint and consumer equilibrium budget constraint 预算限制线，取决于收入和价格的变化 consumer equilibrium 消费者均衡，与预算限制线相切的效用无差异曲线 当收入变化时 normal good 随着收入增加，商品购买数量增加 inferior good 随着收入增加，购买数量减少 当价格变化时，商品弹性越大，数量变化越大，反之... income and subsitution effect substitution effect 替代效应，A价格降低，相对替代品B的价格降低，A的需求增加 income effect 收入效应 for normal good，when price decreases substitution effect，+ income effect，+ total effect，+ for inferior good，when price decreases substitution effect，+ income effect，- total effect，+ for Giffen(吉芬) good，when price decreases substitution effect，+ income effect，- total effect，+ Giffen good是一种inferior商品。 对立的，Veblen goods(韦伯伦商品)，价格越高，需求越高，例如。 economic profit and economic rent cost opportunity cost 机会成本 explicit costs 显性成本 implicit costs 隐形成本 total economic costs = explicit costs + implicit costs profit accounting profit (AP) = total revenue - accounting costs economic profit (EP) = total revenue - total economic costs = accounting profit - implicit costs normal profit (NP) 当经济盈利=0时的会计盈利，即等于隐性成本。 rent economic rent 经济租金，供应的成本高于机会成本的部分。 rent seeking 寻租，一些公司通过游说政府使用行政力量使供应商获得一定的垄断或限制市场供应，增加需求 revenue, cost and product perfect competition 完全竞争市场。每个生产商对市场的价格没有影响，供应的商品相同，需求曲线水平。 imperfect competition 不完全竞争市场。生产商可以成为price maker，产品差异化，需求现向下倾斜。 revenue total revenue (TR) 总收入 average revenue (AR) 单位商品的收入 marginal revenue (MR) 边际收入 完全竞争市场的 $Price = AR = MR$ cost total fixed cost (TFC) 固定成本，只是短期现象 total variable cost (TVC) total cost (TC) TFC + TVC average... marginal cost (MC) 边际成本，改变单位商品的成本 product 产量 total product (TP) 总产量 average product (AP) 单位要素的产量 marginal product (MP) 边际产量，要素变化一个单位的产量变化量。 diminishing marignal return --递减边际回报 production function 生产函数 cost analysis in short run 在短期内，固定成本(TFC)不变 劳动力的边际产量先递增，再递减。 边际产量递减时，边际成本递增，反之... 平均总成本和平均变化成本先递减，在递增 边际成本曲线和平均变化成本、平均总成本曲线相较于两个各自的最低点 in long run SRATC short run average total cost 在长期生产中，固定成本会不断变化 economices of scale 规模经济，产能增加时单位成本减小 division of labor more expensive but more efficient equipment discounted price on resources diseconomices of scale 规模不经济，产能增加时单位成本增加 management inefficiency overlap and duplication of business functions higher resource prices due to suplly constraints，对于一些稀缺资源，买得越多议价能力越差 minimum efficient scale 成本最低有效规模， MES 在最低平均成本下的产量 profit maximization 研究完全竞争者的盈利最大化 盈利最大化点: Profit = TR - TC 取最大 or MR = MC shutdown and breakeven point: 停业和盈亏平衡点 对于完全竞争市场，平均收入AR = MR = price AR（average revenue） &gt;= ATC 继续生产 ATC &gt; AR &gt;= AVC 短期生产，长期退出市场。虽然生产商品能够赚钱，但是不能cover了AFC AR &lt; AVC 短期不生产，长期退出市场 short-run shutdown point 平均收入小于平均变化成本 long-run shutdown point 平均收入小于平均总成本，大于平均变化成本 breakdown point 盈亏平衡点，平均收入等于平均总成本 long-run equilibrium 长期平衡点。在完全竞争市场，当价格小于...的交点时，价格会上涨，反之...因此价格会等于最低点，此时企业zero economic profits long run supply and utilization of resource when industry output is increased in the long run increasing-cost industry 需求增加量超过供应增加量，成本(price)递增 decreasing-cost industry 供应量增加量超过需求增加量，成本下降 constant-cost industry 两者相等时成本不变 cost minimization 所有要素的(边际产量/价格)比例相等时。 marginal revenue product (MRP) 边际产量收入，一个要素多增加一个，能够产生的额外总收入。 $MRP = MP \times price (MR)$ 要实现盈利最大化，每个要素的MRP应该与单位要素的价格相等。原理与MC = MR相同。 perfect competition 完全竞争市场 大量购买者和销售者 商品几乎相同 几乎没有门槛 sellers are price-takers 没有价格以外的竞争，只要接受市场价，都能卖出去，不需要例如广告这类竞争 盈利最大化: $MC = MR$ 长期情况下，no firms earns economic profits 短期内，公司的边际成本线高于AVC交点的部分也是公司的供应线。 只有完全竞争市场能够找到一条明确的供应线。 monopolistic competition 垄断式竞争，与完全竞争市场的区别在于，商品差异化，有一定的定价权。 只有完全竞争市场需求线和边际收入线是重叠的，其他市场的需求线和边际收入线都不同。 由于进出门槛低，盈利不可持续。 完全竞争市场社会福利最大化，垄断竞争市场不能实现，供给量比最大化点小。 福利是消费者可以选择各种不同的商品。 monopoly 垄断市场，只有一个生产商，没有好的替代品，进入壁垒高，例如资源控制、政府控制、专利、自然垄断（大规模生产具备的成本优势）、巨大的固定资本投资 经济盈利为正，由于高的进入壁垒，盈利可持续 社会福利未达到最大化，under production 政府通过定价管制干预垄断 平均成本定价 P=ATC，无谓损失减小 边际成本定价 P=MC，价格过低，企业亏损，政府需要补贴 price discrimination 价格歧视，不同消费者的价格不同。 需求弹性不同 商品不能转手，二次交易 种类 first degree price discrimination 一级价格歧视，每个消费者能够接受的最大价格，消费者剩余为0，社会总剩余最大化，增加了产量 second 二级价格歧视，价格取决于购买量，消费者剩余比没有价格歧视低 third 三级价格歧视，价格取决于消费者的身份 oligopoly 寡头市场，生产商很少，商品可以类似或差异化，进入门槛高，对自己商品的定价权高，存在价格以外的竞争 kinked demand curve model 拐折需求线模型 需求线存在两段，弹性小的和弹性大的，对应的边际收入线也是两段，中间存在一个gap，这导致企业可以在价格不变的情况下容忍边际成本的增加。 纳什均衡模型 collusion 串谋 商品差异小 生产商数量较小 成本结构相似 订单大小和频率 背叛成本高 外部竞争高 dominat firm模型 (DF, 主导企业) 价格制定者，其他生产商是价格接受者 市场集中度的度量 N firms concentration ratio (N个公司集中值) 市场中最大的N个公司的市场份额 缺点： 不能展示进入难度 对并购不敏感 没有考虑需求弹性 HHI指数 (Herfindahl-Hirschman Index, 赫芬达尔-赫希曼指数) 公司壁纸的的平放和 Macroeconomics Gross Domestic Product GDP 国内生产总值 Key points given period of time newly goods and services produced market value exceptions: rent of own house 购房看成每年交租金加入到每年的gdp中, government service 政府支付给公务员的工资算在gdp中 final goods and services, 半成品、零部件不算 Measure of GDP Aggregate output (总产量) Aggregate income (总收入) Aggregate Expenditure (总开支) $ GDP = C + I + G + (X-M) $ C: 消费者开支 I: 投资，企业实物投资，不包括金融投资 G: 政府开支，例如购车、提供服务 X-M: 出口-进口 value of FInal output 终值法，考虑商品最终的价值 sum of value added 增值叠加法，考虑商品生产的每个阶段增加的价值 nominal gdp 名义gdp 用商品的current price算 real gdp 实际gdp 用商品在基准年的constant price算 gdp deflator gdp平减指数，可以衡量国家的物价水平 National income = 劳动力工资和福利 企业税前盈利 投资利息收入 非公司商业组织（例如个体户） 租金 间接税 补贴 personal income 个人收入需要在国家收入减去 间接税、公司收入、企业的留存盈利，加上转移支付（例如福利） personal dispensable income个人可支配收入在个人收入上减去 税 Aggregate Demand Measure GDP -- income approach $$GDP = C+S+T$$ S: 家庭和公司储蓄 T: taxes 根据GDP守恒得到 $$S-I = (G-T) + (X-M)$$ $S-I$ $G-T$ 政府收支 $X-M$ 进出口盈余 IS Curve 忽略政府收支和进出口两项，$I(r) = S(Y)$。利率r提高，投资I增加，相应的储蓄S增加，GDP Y也增加，反之... marginal propensity to consume MPC 边际消费倾向，每增加1元收入，多少用来消费 marginal propensity to save $$MPC + MPS = 1$$ quantity theory of money 货币数量理论，货币总供给=货币总需求 $$MV = PY$$ M 货币供应 V 货币流动速率 P 物价水平 Y 商品数量 国家生产的商品数量不取决于货币供应量，货币供应增加直接影响物价水平 Keynes's demand for money theory $$\frac{Ms}{P} = Md(r, Y)$$ Ms 货币供应量；Md 货币需求，利率和GDP 交易性货币需求 gdp越高，需求越高 预防性货币需求 gdp越高，需求越高 投机性货币需求 利率增加，持有货币的机会成本变高，更希望投资出去，货币需求降低 LM curve 假设: $Md = Ms$，利率r增加，Md会减小，要想Md保持不变，Y要增加抵消r的影响。因此r和Y正相关 IS-LM Curve 保证总收入=总开支和货币总供应=总需求两个均衡。 物价下降，实际货币供应增加，lm线上利率减小(lm线向右移动)，刺激消费投资，最终导致实际gdp增加。 Aggregate supply 总供应 very short run 超短期，商品的供应数量和价格不会改变物价水平，供应线为水平线 elastic long run 物价不能决定商品的产量，供应线为垂直线 inelastic potential GDP = full employment GDP 潜在/充分就业GDP，劳动力充分使用的，也可能有失业 对应 自然失业率 short run 部分要素价格水平变化 总需求的变化因素 fiscal policy monetary policy 家庭财富 预期 产能利用率 汇率 exchange rate 经济增长 短期总供应的变化因素 名义工资 原料价格 未来商品的价格预期 税和补贴 汇率 当AD和short-run AS线相交于充分就业GDP点，称国家经济是健康的 recessionary Gap 衰退差 $$Actual GDP &lt; Potential GDP$$ $$unemployment rate &gt; natural rate$$ policy choice do nothing，经济会自己调整，周期较长 主动的财政和货币政策，使总需求线往右移动，例如增加政府开支、降税 inflation gap 通胀差 $$Actual GDP &gt; Potential GDP$$ $$unemployment rate &lt; natural rate$$ 导致物价太高 do nothing 主动的财政和货币政策，使总需求左移 stagflation 滞涨，high inflation and high unemployment rate 某些生产要素价格上涨，导致商品价格上涨，总供给线左移，gdp下降，价格上升。若优先解决失业，政府降低利率或增加开支，增加就业率，AD线向右移，回归均衡点，但是价格水平高了，更通胀 。反之。。 economic growth Sources 劳动力 labor 劳动力素质 human capital 实物资本 physical capital 不可持续，递减的 technology natural resource 不可持续 production function: $Y = A \times f(L,K)$ Y 实际gdp A 全要素生产率 total factor productivity or technology 短期不变 L 劳动力 K 资本 国家的实际gdp取决于技术、资本和劳动力 output per worker: $\frac{Y}{L} = A \times f(\frac{k}{L})$ 人均gdp取决于技术和人均可支配资本 劳动力生产率：工人单位时间生产的商品总量 $laborProductivity = \frac{realGDP}{AggregateHoursWork}$ business cycle four phases: trough, expansion, peak, contraction early expansion late expansion peak contraction main theories neoclassical 新古典主义 原因: 技术 recommended policy: 政府不做任何事情 keynesian 凯恩斯主义 -- 主流 原因：企业预期，downward sticky wages（工资下降是很困难的，影响了经济的自我修复） policy：政府财政和税收政策 new keynesian 原因：与凯恩斯相同，但是认为所有生产要素都很难下降 Monetarist 货币主义 原因：不合适的货币供应 policy：稳健的货币供应 Austrian 奥地利学派 原因： 政府干预 policy：政府不要人为设定低利率 new classical 第二代新古典主义 原因：技术和外部波动 policy：政府不应该采取逆周期的政策 unemployment underemployed 未充分就业 unemployed 主动找工作但目前没有的，故意失业不算入内 discouraged worker 停止找工作的人，不在劳动力和失业人群中 voluntarily unemployed 自愿失业 $$unemploymentRate = \frac{unemployed}{totalLabor}$$ 失业率是一个滞后指标：在经济复苏时灰心的劳动力会加入就业市场，短期内失业率反而会升高，此时企业也会谨慎的招聘新的职工；经济衰退时企业也不会轻易的裁员 $$participationRatio(activityRatio) = \frac{laborForce}{workingAgePorpulation}$$ 失业的类型 摩擦性失业，双选需要时间 结构性，经济结构调整 周期性，经济周期 full employment: 国家没有周期性失业，但是摩擦和结构性总会存在 inflation disinflation: 通货膨胀，当比率在降低 indices to measure inflation laspeyres index 拉斯拜尔指数，固定篮子的商品的价格，商品需求使用基年的。存在替代、质量和新产品的偏差 Passche index 派许指数，使用当前年份的商品需求 fisher index 费雪指数，几何平均值 Comsumer price index CPI 使用拉斯贝尔指数 producer price index PPI headline inflation 所有商品和服务的价格 core inflation 不包括食品和能源，一般政府用来做参考 原因： cost-push inflation 成本推动 demand-pull inflation 需求推动 leading indicators 领先指标 coincident indicator 同步指标 lagged indicators 滞后指标 Monetary policy 通过改变利率和货币量 狭义货币 M1 流动性最强的几种 广义货币 M2 包括一些定期存款等等流动性弱的 货币creation的过程 reserve requirement 商业银行要保留一定存款作为准备金 money multiplier 1除以准备金比率 $$产生的货币 = newDeposit \times moneyMultiplier$$ fisher effect 费雪效应，名义利率是实际利率和预期通胀的和 央行的角色，总的目标是价格稳定 货币法定供应者 商业银行的银行 最后一个贷款人 监管者 货币政策的执行者 央行的有效性 独立性，操作(设置利率)、目标(通货膨胀率)独立 可信度 透明度 央行的目标 利率水平，利率高了就增加货币供应 通货膨胀 汇率，对于货币盯住美元时 预期通胀的成本：菜单成本，鞋底成本 可以忽略... 未预期的通胀成本：财富在借钱双方中转移，增加借钱成本，减少市场信息 货币政策的3大工具 open market operations，买卖国债等 回购协议，商业银行卖给央行并承诺一段时间后以高价买回 基准利率 准备金要求 货币政策的影响 宽松的货币政策增加GDP、价格水平、降低利率和现金价值 紧缩的货币政策相反... determine the direction of policy: neutral interest rate 中性利率，实际经济增长+通胀 limitation: 央行不能准确的控制 债市义勇军，紧缩的货币政策反而导致债券（风险较小）价格升高 流动性陷阱 量化宽松 fiscal policy 角色和目标 相机财政政策，基于政府对经济的判断采取相应的 自动稳定器，不采取主动的财政政策，凭借自有的福利制度 政府开支 转移支付，给穷人等等的 维护政府运作的开支 资本开支，基础建设等等，生效时间很长 政府收入 直接税，更难改变、受到社会更大的反弹 间接税，影响很快 arguments type one： 国家负债过高，政府会增加税收，降低GDP 市场对政府失去信心，政府发行国债的成本提高 利率增加，个人和公司融资成本升高 type two： 国债只是借给本国人的 政府借钱投资于基础设施，对GDP有正面影响 改变税率可以减少赤字 Ricardian equivalence 李嘉图均衡，公众预期税收增加，会增加储蓄 改善失业率 limitation--滞后性 识别滞后，政府确认经济形势需要时间 行动滞后，采取政策需要时间 影响滞后 困难 失业率和通胀不可兼得 高负债降低市场对政府的信心 gdp水平难估计 容易错误判断导致经济衰退的原因 排挤效应 determine direction: structural budget deficit 结构预算赤字 财政与货币政策的结合... Economics in a Global Context international trade terms of trade: $\frac{P_{export}}{P_{import}}$ GNP 相比GDP，排除了外企的，包括了本国在境外的 绝对优势 生产成本低 比较优势 生产的机会成本低 Ricardian modal 只有存在比较优势，一个国家才能在交易中获利。劳动力是唯一的生产要素 Heckscher-Ohlin Modal 赫克歇尔-俄林模型，生产要素包括劳动力和资本 Restrictions trade restrictions reasons infant industry national security protecting domestic jobs protecting domestic industry types tariffs quotas 限制进出口数量 export subsidies 向出口商提供补贴 voluntary export restraint(VER) 自愿出口限制 一些结论 进口量大的国家有较强的议价能力 国家之间的合作模式 free trade area customs union common market economic union monetary union 例如欧盟 以上的合作模式越来越深入 capital restrictions reasons 降低市场价格波动 维持固定汇率，例如亚洲金融危机时的泰国 保持较低的国家利率来刺激经济增长 保护战略性的工业，例如国防 balance of payment 国际收支平衡 三个账本 current account merchandise trade services income receipts 投资的收益记在current account中，本金不在 unilateral transfers 例如中国人在海外挣钱汇回本国 capital account capital transfers 免除债务、移民带走的资产 sales and purchases of non-produced, non-financial assets 例如专利、版权、商标、自然资源 financial account 记录投资流动 海外国有资产，投资的本金记在这里 国内的其他国家的资产 一定时间内，三大账户的变化之和应该为0 三个机构 IMF 国际货币基金组织 world bank group 世界银行 WTO exchange rate 概念 price currency base currency direct quotation 本国货币在分子上 indirect quotation nominal exchange rate 名义汇率 real exchange rate 实际汇率 反应了两个国家的购买力的区别 spot exchange rate 即期汇率 forward exchange rate 远期汇率 functions of foreign exchange(FX) market ... forward quotation point basis $spotRate+0.0001\times points=forwardRate$ percentage basis $spotRate\times (1+points) = forwardRate$ 利率平价关系 $\frac{F_{x/y}}{S_{x/y}} = \frac{1+r_x}{1+r_y}$ forword premium and discount 远期升水和远期贴水]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Basic probability]]></title>
    <url>%2F2017%2F09%2F03%2Fbasic-probability%2F</url>
    <content type="text"><![CDATA[分类 empirical probability 经验概率 过去推断未来 根据过去的股票涨跌，猜测未来 priori probability 先验概率 过去推断过去 从已知个数的不同色球中取出一种颜色的概率 subjective probability 主观概率 odds for = 发生/不发生的概率 odds against = 不发生/发生的概率 unconditional probability 非条件概率 conditional probability 条件概率 joint probability 乘法法则 时间和的概率 两个事件至少有一个发生的概率。 total probability rule 全概率公式，先分类再分步 bayes formula 贝叶斯公式 application expectated value investment tree covariance 协方差，正的趋向于正相关，负的趋向于负相关 correlation 相关系数，[1,-1] 1/-1 完全正/负相关--在一条直线上 0 完全没有线性关系 协方差/标准差之积 labeling 贴标签，排列组合 probability distribution 离散概率分布 -- probability function 连续概率分布 -- probability density function 概率为0的事件是可能发生的--连续随机变量 cdf cumulative probability function 伯努利随机变量 二项随机变量 -- 计算方法 股票价格的二叉树 tracking error total return和benchmark return的差距。 tracking risk tracking error的标准差，用于评估基金经理的工作。 continuous probability distribution continuous uniform distribution normal distribution skewness = 0 kurtosis = 3 多个正态分布的随机变量的线性组合依然服从正态分布 置信度： 68% -- 1 90% -- 1.65 95% -- 1.96 99% -- 2.58 标准正态分布（均值0，方差为1） z分布，z值 用于正态分布查表，先求出z值，查表 资产的回报服从正态分布 shortfall level: the risk that portfolio value or return will fall below the minimum. 是一个概率！ 越低越好 safety-first ratio 安全边际，距离mean有多少个标准差 越大越好 lognormal distribution 对数正态分布 x服从正态分布，则e的x次方服从对数正态分布 取值大于0，positive skewed 正偏 一般用于描述资产的价格 t分布 student's t-distribution 由degree of freedom决定，n个sample对应n-1 degree 对称，无偏 fatter tails 自由度越高，越接近标准正态分布 相同的置信度下，t分布的置信区间比z分布更宽 置信区间 **%的把握在一个区间中 univariate distribution vs multivariate distribution discrete compounding vs continuous compounding simulation Monte Carlo simulation 使用随机值作为一个风险因子生成一个服从某种分布的sample 缺点：计算复杂，结果不会比风险因子的假设好 historical simulation 随机选择过去的数据 缺点：没有 sampling 推断性统计 -- 用于估计、判断和预测。借助抽样，得到抽样的统计分布，从而得到总体的分布的参数。 simple random sampling 简单随机抽样，等概率选中总体的任何一个个体。 stratified random sampling 分层随机抽样，先分层，对每层按比例抽取。 sampling error 样本参数相对总体参数的差距 sampling distribution 总体参数是个常数，样本统计量是个随机变量。 time-series data 随机变量在不同时间(相邻时间点间隔相同)的取值 cross-sectional data 随机变量在一个时间点有很多取值 sample biases data-mining bias: 反复在相同的数据中挖掘pattern过程中的偏差。 sample selection bias: 样本不能很好的体现 supervisorship bias: 只能统计到还存在的数据，例如基金数据，只能收集到幸存下来的基金，取样相对总体偏好。 look-ahead bias: 测试时间点的数据not available time-period bias: 在某一个期间的sample的规律不一定在其他期间。 estimate point estimate 用样本统计量估计总体统计量确定的值。 estimator unbias, the expected value is equal to target parameter efficiency, 最小的方差 consistency, 样本越大，精度越高 confidence interval estimate reliability factor 依赖因子 查表或记忆得到依赖因子，从而得到区间估计 central limit theorem 中心极限定理 对于任意概率分布，样本均值的分布趋向于正态分布，其正态分布的均值趋向于总体的均值。 standard error 标准误，样本均值的标准差，若无总体本准差，使用样本标准差代替。 confidence interval estimate 根据中心极限定理，可以得到样本均值的置信区间。 choosing statistic for reliability factor 样本量 &gt;= 30 大样本量，服从正态分布 若总体标准差已知，转化为标准正态分布（z分布 ） 若未知，使用样本标准差s代替，使用t分布，但当样本量&gt;=30（t分布的自由度更大 ），可以使用z分布近似。 hypeothesis testing 通过抽样，对于总体的一个判断 步骤 stating the hypothesis identifying the appropriate test statistic and its probability distribution specifying the significance level(显著度) stating the decision rule collecting the data and calculating the test statistics making statistical decision making economic or investment decision null hypothesis 原假设，被检验的，‘=’只存在与原假设，只能说 reject 或者 not reject，accept是错的 alternative hypothesis 备择假设，希望得到的结论 由于统计学上很难从正面证实，只能通过“不能证实方面”。 test statistic 检验统计量，即转化为z分布 critical value 关键值 significance level 显著度 p-value 原假设被拒绝的最小显著度，若显著度大于p值，拒绝原假设 two-tailed test 双尾检验 one-tailed test 单尾检验 何时拒绝？ 检验统计量跑到关键值分割的拒绝域中 p值小于关键值 error type I error alpha 与显著度有关，将真的判断为假的 tyep II error beta 将假的判断为真的 power of test 1-beta 势 增加样本量可以同时降低第一、第二类错误 for single mean 已知总体方差，使用正态分布 若不知道，使用t分布 若样本量大，t分布可以使用z分布代替 求检验统计量，根据置信度找到z分布/t分布的关键值，再比较。 difference of means 检测均值相减 相互独立，同方差且未知，使用t检验 相互独立，异方差且未知，使用t检验 mean differences 成对检验，对很多对数据的均值的检验 对两个未知方差的有依赖性的总体，使用t检验 single variance 单个方差的检验，使用卡方检验(Chi-square) equality of two variances 检验两个方差是否相等，使用F检验 parametric tests 参数检验，基于对总体分布和参数的假设 nonparametric tests 非参检验, test things other than values data do not meet distributional assumptions data are given in ranks 假设中不存在参数，例如“检验a是否服从正态分布” technical analysis 技术分析只用过去的价格和交易量，且价格完全由供需决定、市场能够反映总的状态。 chart trend uptrend: higher highs and higher lows downtrend: lower lows and lower highs support line 支撑位: a low price range in which buying activity is sufficient to stop the decline in price resistance line 主力位 :涨到一定价格很多人卖，价格停止上涨 change in polarity: 支撑位被突破变成阻力位，反之... reverse patterns indicator 指标... cycle analysis 周期分析 Elliott wave theory]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Simple statistics]]></title>
    <url>%2F2017%2F09%2F02%2Fsimple-statistics%2F</url>
    <content type="text"><![CDATA[简单统计概念 descriptive statistics &amp; inferential statistics nomial scale ordinal scale +排序 interval scale +加减法 ratio scale +乘除法 central tendency 用于估计预期回报 均值 population mean 总体的mean sample mean 样本的mean central tendency 中心趋势 arithmetic mean 对极值影响很大 geometric mean 用于算平均回报，可以先+1，全部变为正的 harmonic mean 多次等额不等价购买的平均成本 机经 算数 &gt; 几何 &gt; 调和 数据集的varibility越大，3个数值的差距越大 other median, 不受极值影响, 当只使用了整个数据集中的一个/两个 mode, 可能有多个或没有, 对于nominal data比较适用 location - quantile quartile 四分位数 quintile 五分位数 deciles 十分位数 percentiles 百分位数 计算方式: 求出来非整数，则将前后两个数按比例求一个中间数 dispersion 用于衡量风险 range 极差，最大-最小 mean absolute deviation(MAD) 平均绝对差 variance 求样本方差要除以(n-1)，纠偏 standard deviation 标准差 coefficient of variation (CV) 变异系数 sharp ratio 夏普比率 Chebyshev's inequality 切比雪夫不等式 skewness skewness 偏度，一个分布是否对称 = 0 对称，均值、中位数、众数相同 0 正偏，mean &gt; median &gt; mode &lt; 0 负偏, mean &lt; median &lt; mode kurtosis 峰度，和正太分布(峰度=3)相比 leptokurtic 尖峰态 kurtosis &gt; 3, excess kurtosis &gt; 0 more peaked, fatter tailed than normal distribution mesokurtic 常峰态，正态分布 platykurtic 平峰态 kurtosis &lt; 3, excess kurtosis &lt; 0 less peaked, slimmer tailed]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Quantitative method]]></title>
    <url>%2F2017%2F09%2F01%2Fquantitative-method%2F</url>
    <content type="text"><![CDATA[interest rate time value of money cash flow additivity principle interpretation required rate of return discounted rate opportunity cost components of interest rate real risk-free interest rate inflation premium risk premium default risk liquidity premium maturity premium 不同compounding frequency下名义利率、有效利率的换算 time value of money problem FV and PV annuity 年金 ordinary annuity 年初 annuity rate 年末 perpetuity 永续年金 unequal cash flow 考计算题 evaluation of cash flow streams net present value NPV, 净现值 internal rate of return IRR, 令净现值为0的 使用这两个rule比较两个项目时，结果可能不同 项目scale不一样 现金流的时间不同 portfolio return measurement holding period return 持有期回报 time-weighted return (TWR) cash流入流出没有影响 period可以为任意长度 money-weighted return ~ IRR cash流入流出有影响，大现金流时间段的回报权重比较大 period必须是相同长度 期限在一年以内的投资品 holding period yield (HPY) 比持有期回报少一个分红，因为小于1年 bank discount yield (BDY) discount(面值-价格)和面值的比值 360 money market yield (MMY) discount(面值-价格)和价格的比值 360 bond equivalent yield (BEY) 365, 在capital market不是这样计算 effective yield 指数形式 除了HPY，越来越大的关系]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Financial analysis]]></title>
    <url>%2F2017%2F08%2F30%2Ffinancial-analysis%2F</url>
    <content type="text"><![CDATA[财务比率概论 分类 common-size analysis, 百分比报表分析 所有绝对数字都改为百分比的形式 剔除量纲，便于不同规模的企业之间的对比 balance sheet中将所有资产和负债除以总资产 income statement中记为销售收入的百分比，可以拿往年或行业平均参考 cash flow statement中 写成销售收入的百分比 inflow写成总inflow的百分比，outflow写成总outflow的百分比(保证了可比性) graphical analysis, 图表分析 stacked column graph 堆积柱状图 line graph 折线图 regression analysis, 回归分析，确定自变量和因变量之间的关系 limitation 比率分析的用途 评估公司不同财年的变化 与竞争对手之间比较 评估公司灵活程度 财务比率分析的受限 financial ratio不能孤立的使用，要有benchmark accounting treatment不同，比较会很困难 可比较的benchmark难找到 比率 profitability ratio 盈利能力指标 net profit margin 净利润率 净利润/销售收入 gross profit margin 初始获利能力 毛利/销售收入 毛利高，净利润率不一定越高 operating profit margin 经营利润/销售收入 反应企业主营业务的利润率，排除了投资、融资、税收的影响 return on assets 所有资产的回报情况 净利润/平均资产总额(年初+年末/2) return on equity 单位权益能获得的净利润 earning per share 每股净收益 EPS activity ratio 营运能力指标 反应企业资金周转状况 turnover ratio 周转率 一年内的周转次数 days of turnover 周转天数 周转一次需要的天数 成对出现的 account receivable turnover 应收账款周转率，应收账款的回流速度 销售收入/平均应收账款 receivable collection period ...天数，越短越好 365/应收账款周转率 inventory turnover 存货周转率，体现了企业存货变现的速度 销售成本/存货平均余额 days of inventory on hand ...天数，越短越好 太长意味着滞销 太短意味着产能不足 account payable turnover 应付账款周转 本期存货采购/平均应付账款余额 低于行业平均代表着对供货商较强的议价能力 number of days of payables ...天数，越长越好 total assets turnover 销售收入/平均资产总额 越高意味着管理水平越高 liquidity ratio 短期偿债/流动能力比率，短期流动性指标 current ratio 流动比率，企业通过变现流动资产来清偿流动负债的能力 流动资产/流动负债 quick ratio 速动比率，只计算流动性较好的资产，对于存货无法及时变现的企业，速动比流动更好 (现金+有价证券+应收账款)/流动负债 相比流动比率，没有算存货 cash ratio 现金比率，当存货和应收账款都存在问题时 (现金+短期投资)/流动负债 比速动比率更进一步，不考虑应收账款 解释力度 3 &gt; 2 &gt; 1 solvency ratio 长期偿债能力比率 从债权人的角度，评估未来还本付息的能力 资产负债率越大，财务风险越高。稳健的资产负债率在55~65%左右。70%以上比较危险。 debt-to-equity ratio 负债权益比率 负债总额/股东权益总额 debt-to-asset ratio 资产负债比率 负债总额/资产总额 financial leverage ratio 权益乘数比率/财务杠杆率 平均总资产/平均股东权益总额 interest coverage ratio 利息保证倍数 息税前利润(EBIT,经营利润)/利息费用 比率至少大于1，表示能够cover利息 valuation 估值比率 用于为公司估值的比率 price earning ratio 市盈率 P/E ratio 每股股价/每股净收益(EPS) 不能孤立的使用，需要一个benchmark 越低越好 price to book ratio 市净率 P/BV ratio 每股股价/每股净资产(book value, 账面价值) 有些公司净利润为负 破净：市净率小于1，股票被严重低估 price to sales ratio 市销率 P/S ratio 每股股价/每股对应销售收入 公司在初创阶段固定资产比较少时 例如京东 DuPoint analysis 分析净资产收益率(ROE，单位净资产/equity的收益)的工具，分解ROE的方法。 三个乘数分别表示企业挣钱能力的高低、管理效率、杠杆能力，前两个越大越好，杠杆不一定。因此ROE不是越大越好，要分析ROE的上升是否只是因为杠杆的上升。 cash conversion cycle 企业经营者从付出现金到收回现金所需的平均时间。该指标决定了企业资金使用效率的高低。 cash conversion cycle = days sales outstanding(存货周转天数，365/存货周转率) days of inventory on hand(应收账款周转天数) numbers of days of payable(应付账款周转天数) 周期越小越好，流动效率越高]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Financial Accounting]]></title>
    <url>%2F2017%2F08%2F23%2Ffinancial-accounting%2F</url>
    <content type="text"><![CDATA[Source of financial accounting barter transaction, 以物易物 measurement 计量 recording 记录 accounting: 以货币为主要计量单位，以凭证为主要依据，借助专门的技术方法，对一定单位资金运动进行...的核算与监督 fundamentals 准则与监管 standard setting body FASB: financial accounting standards board --&gt; U.S. GAAP: 美国准则，由FASB和SEC规定的 IASB: international accounting standards board --&gt; IFRS: 国际准则 regulator SEC: U.S. securities and exchange commission, 美国证券交易监督委员会 FSA: U.K. financial service authority, 2008年分割为 FCA(financial count authority) 和 PRA(prudential regulation authority) 两个机构 IOSCO: international organization of securities commissions CSRC: Chinese security regulation commission, 中国证监会 监管部门职责： 保护（中小）投资者 维护市场公平 降低市场的系统性风险 standard setting bodies v.s. regulatory authorities 准则设定机构只负责编制，监管机构还可以进行处罚和执行 accounting elements 5要素，前三个在资产负债表中，后两个在利润表中 asset liability debts and obligations accounts payable, note payable equity, net asset, asset比liability多的部分。 revenue, 主营业务带来的销售收入 非主营业务带来的收入叫gain expense cost of goods sold 销货成本 selling, general and administrative cost 销售一般管理费用 SG&amp;A interest expense 财务费用, e.g. 还贷款 income tax expense 所得税费用 profit 分红或进一步投资 net income 净利润，the bottom line relationship between elements 会计恒等式 assets = liability + equity 优先股股东相比普通股股东，有固定的收益率，公司分红优先分配给优先股股东。 revenue - expenses = net income(bottom line) 若企业没有发生其他权益增减的行为，例如回购股票、购买股票等时， equity = revenue - expenses assets = liability + revenue - expenses double-entry accounting assets + expenses = liability + revenue 等号左边称为借方(debit)，等号右边称为贷方(credit) 左边借会增加、贷会减少，右边反之 记账一定是借一笔、贷一笔 income statement/profit&amp;loss(p&amp;l) format: multi-step I/S 包含毛利润，即费用-销售收入 折旧费用根据功能分到各个子项中 single-step I/S 没有毛利润，计算了折旧费用 expense COGS, goods sold: 生产活动直接产生的费用，例如人力成本 SG&amp;A, operating expense: selling, 销售费用 general administration 行政管理费用，例如奖金 depreciation cost: 折旧费用，固定资产在每年的损耗 depreciation expenses 折旧费用，针对有形资产 amortization expenses 摊销费用，针对无形资产 interest expense: 财务费用，例如债券、贷款、信用额度... 可以少交所得税 long-term contracts 一般是建造工程类的合同 percentage of completion method 完成百分比法 有靠谱的合同，估计值准确 在合同期间按当期发生的费用占总费用的百分比分配利润到每一年 completed contract method 完成合同法 没有靠谱的合同，估计值不准 在没有完成合同之前revenue和expense都不计入财报 barter transaction 物品与物品直接交换，有比较强的限制 gross revenue reporting 总价确认: sales revenue和cost of goods sold分开报 net revenue reporting 净价确认: 不披露gross revenue gross revenue reporting 能够比 net revenue reporting 在当期确认更高的收入 inventory valuation method cost flow method, 计量方法 specific identification method, 个别计价法, e.g. 珠宝、艺术品，对于那些商品之间价值差距较远的。 first in first out method(FIFO), 先进先出法, 最早卖出去的认为是最早进货的部分。 last-in first-out method, 后进先出，最早卖出去的认为是最晚进货的部分。 weighted average cost method, 平均加权法，求所有批次的进货的平均成本作为expense depreciation expenses straight-line depreciation, 直线折旧法 cost: 历史原值, residual value: 残值, useful life: 使用年限 double declining balance depreciation, 双倍折旧法 前几年的折旧比较高，属于比较保守的做法。 逐年计算，当发现折过残值（账面价值不能小于残值）时不再折旧。 balance sheet 资产负债表 current asset 流动资产/短期资产，一般容易变现的会放在前面，根据流动性罗列；持有期小于 max(1年，或短于经营周期)。 cash and cash equivalents，包括现金、支票账户、货币基金、国库券等。 account receivable, sold on credit(赊销), 可能有风险。 accrual accounting, 权责发生制会计, 在提供服务后即可计入资产。 cash accounting, 收付实现制 inventory, 存货 包括供货商采货和生产 过量存货会增加存货废弃的风险，过小存货导致库存短缺 prepaid expense，本质是一种权利，提前付了定金购买未来的产品或服务 noncurrent asset, 持有期大于 max(1年，或短于经营周期) tangible asset property, plant&amp;equipment, PP&amp;E 土地(在美国不需要折旧)、建筑、机器、家具、自然资源等等 long useful life, depreciation 固定资产投入往往能够增加产能。 intangible asset，前三个是可以剥离出来的，商誉不能 patents 专利，内部产生的不能证明价值的专利不能计入 trademarks 商标 copyright 版权 good will 商誉，企业合并时，它是购买企业投资成本超过被合并企业净资产公允价值的差额。 financial assets 根据持有意愿分类 held-to-maturity securities, 持有至到期金融资产 一般是债券 到期前的浮盈浮亏不会影响利润表 trading securities, 交易性金融资产 公司希望能够在短期获利的资产，记录的应该是公允价值。 需要计入利润表 available-for-sale securities, 可供出售金融资产 既不是持有至到期，也不是短期要卖的 以公允价值记账，但是增值不计入利润表中，而是其他类通货收入。 liability 与asset分类相同 current liability 一种义务， accounts payable 应付账款，欠供货商的钱 accrued liability 应计负债，权责发生制会计的做法 例如，工资、税金、利息、股利 unearned/deferred revenue 预收收入 non-current liability, long-term liablility, e.g. 长期债务、租赁 long term debt 例如 bank loan, notes payable, bonds payable 由于在所得税之前扣除了负债的expense，长期负债可以降低所得税 lease 租赁 format of cash flow statement 描述一个周期内公司现金头寸的增减和增减发生的原因。 收付实现制 经营性现金流 CFO(cash flow operation) 主营业务相关的现金流 inflow cash collected from customer sales proceeds from *trading securities, 由于属于投机性，非战略性的，因此不算在投资性现金流中 interest received dividend received, 注意：dividend paid不属于经营性outflow outflow cash paid to employees and suppliers acquisition of trading securities interest paid tax paid cash paid for other expense 投资性现金流 CFI(investing) 金融市场的长期战略性投资 &amp; 固定资产投入 inflow sale fixed assets sale debt&amp;equity investment, 长期的 principle received from loans to others, 注意：利息部分记在经营性现金流中。 outflow acquisition of fixed assets acquisition of debt&amp;equity investment loan to others 融资性现金流 CFF(financing) 体现了公司的融资实力 inflow principle amounts of debt issued, 债务类融资 proceeds from issuing stocks, 股票类融资 outlfow principle paid on debt, “还本”，利息记录在经营性现金流中 reacquire stock, 回购股票 dividend paid to shareholders, 支付股息, 收入股息属于经营性现金流 US GAAP vs. IFRS 国际准则中 taxes paid 根据tax产生的来源分类，例如资本利得税属于CFI。 bank overdraft：向银行借钱，类似于信用卡透支，利息没有或较少。 free cash flow 自由现金流：不影响公司正常发展情况下，能够任意使用的现金 FCFF free cash flow to firm 公司自由现金流，所有投资人，包括债权人和股东。 FCFE free cash flow to equity 股东自由现金流，只包括股东，即付完债权后股东真正能用的。 statement of oweners' equity 反应本期内股东权益的变动及原因。 balance at the beginning capital contributed during the period (增值或增发股票) profit for period (留存收益) drawings (回购，亏损等降低权益的因素) = balance at the end (期末权益) entries of equity contributed capital 原始股 preferred stock (优先股) 优先分红、优先受偿、没有投票权 common stock 分红权、投票权 treasury stock (库存股，回购了但未注销的) 无分红、投票权 retained earnings (留存收益，未分配利润) non-controlling interest (少数股东权益) 母公司未百分之百控股，子公司未被母公司拥有的部分 financial report footnote 财报附注 accounting method, assumption and estimate business acquisition or disposal (收购和变卖的细节), legal actions (法律诉讼), employee benefit plan (DB, 养老福利) are audited (需要审计) eg. Apple. goodwill and other intangible assets income taxes accounting polices finacial instruments management's discussion and analysis MD&amp;A, 管理层讨论与分析。 从管理层的角度出发，分析企业和行业的发展趋势。 audit report 审计报告 保证客观、公证、可靠 accounting firms is responsible for external audit(外部审计) internal audit(内部审计), 公司内部的 审计师采取抽样(sampling)查找。 为了应付外部审计，公司会利用信息不对称尽可能缩小审计边界。 审计师必须独立、客观，要对数据的真实性、公司重要员工的职业操守做出评价。 审计完成后审计师会和公司管理层磋商再发布。 audit opinion reasonable assurance, 表示仅仅是已给数据的 同意 unqualified/clean opinion 无保留意见 qualified opinion 保留意见，磋商没能达到一致的 不同意 adverse opinion 否定 disclaimer opinion 拒绝发表意见，等于说不接受工作 整个公司选择会计事务所要一致。 SEC filings 美国证监会要求披露的文件报备格式。 上市公司要对引起公司股价异常波动的重大事件按规定的文件格式提前进行报备。 一般在公司官网的investor relations(投资者关系)部分查看。 典型文件 form 8-K 重大事件披露，material events disclosure 重大收购和处置事项 管理层变更 公司治理结构 form 10-K 年报，需要经过会计师事务所审计 form 10-Q 季报，不需要审计 form DEF-14A proxy statement，需要全体股东投票表决的重大事件。 提供董事会成员信息、薪酬和期权等]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Portfolio Management and Fix income]]></title>
    <url>%2F2017%2F08%2F22%2Fportfolio-management-and-fix-income%2F</url>
    <content type="text"><![CDATA[asset allocation balance of risk and return. security selection capital asset pricing model(CAPM) systematic risk(系统性风险): 利率、通胀、经济萧条... unsystematic risk 与预期收益比较，判断证券是否被低估 fixed income 债券 收益固定，有限期 股票收益是股息和红利，不能退还，只能转让 五要素: issuers: government, corporate sector par 其他投资: 银行存款，理财，债券基金 主要购买者：商业银行，寿险公司，养老金，基金会 recommended book--《固定收益证券》 按票面利率分类 固定利率 浮动利率: FRN, coupon = LIBOR return(浮动) + spread source of return 利息和本金 再投资收入：使用利息 capital in/loss，债券买卖 credit risk credit rating: e.g. Moody, s&amp;p... 4C法则: capacity, covenants(条款), collateral, character(人品...) credit enhancement: external: 保险公司，银行 internal: 过度抵押 bond pricing PMT = coupon YTM yield to maturity 到期收益率 YTM与bond price为反比关系，凸性 coupon rate &gt; YTM: 债券价格较高 coupon rate = YTM... coupon rate &lt; YTM: 价格较低 短期债券主要受market price risk(债券价格)影响 长期债券主要受coupon reinvestment risk影响 interest rate risk YTM变化对债券价格的影响 零息债券 复息债权 平均到期时间(duration) Macaulay duration: 以折现现金流为权重的现金流回流的平均时间 平均时间越大，利率风险越高 债券市场 债券发行方式: 公开发行、私募 MBS and subprime crisis MBS: mortgage-backed securities, 将住房抵押贷款包装卖给SPV，SPV打包为MBS卖给投资人。以买房人的月供作为资金来源的证券 securitization: 资产证券化，以特定资产组合或特定现金流为支持，发行可交易证券的一种融资形式 国内债券市场 流通市场 场内市场（辅）：证券交易所 企业债券（未上市） 公司债券（上市） 国债等等... 场外市场（主）： 柜台交易 储蓄国债 记账式 银行间债券市场（主要），类型： 债券买卖 债券回购：质押式回购，买断式回购 债券远期交易 大额存单：面值大，个人30w企业1000w左右，收益高]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Derivatives]]></title>
    <url>%2F2017%2F08%2F22%2Fderivatives%2F</url>
    <content type="text"><![CDATA[根据标的分类 金融衍生产品，标的产品：股票、证券、外汇 商品衍生产品 具体类型 forward(远期合约) 场外交易（无固定场所）的合约 buyer和seller约定在未来一个时间以固定的价格买卖 有违约风险 交割 在结束日期交割：现金、实物交割 提前交割：签反向合约 找原签署方签（低风险） 新找一个签署方 future（期货） 无违约风险 cleaning house：清算所，多空共同交易的对手方，保证交易双方能够履行合约，通过settlement（每日结算）+margin/performence bond（保证金）+涨跌停版制度实现 本质上也是forward，但是由于场内交易，有监管、流动性好，没有default risk 场内与场外衍生品 over-the-counter(OTC) trade: 直接交易，无固定场所，e.g. forward, swap exchanged trade: 通过cleaning house进行交易，固定场所，e.g. future 期货与现货 交易程序，期货既能做多又能做空，现货只能做多 保证金 initial margin maintainance margin(最低保证金) margin call(追加保证金)，补足到initial margin variation margin(变动保证金) 每日结算，marking to market(盯市)，场外是没有的 hedge(套期保值) swap 本质上是多个时间点的forward(远期合约)的集合。 属于场外交易，有default risk 常考3类 interest rate swap(必考) 最简单的：浮动和固定利率的互换 币种必须相同 不交换本金 结算方式：netting，差额结算 没有固定换固定、浮动换浮动 currency swap，不同币种之间的 可以固定换固定... 需要交换本金 equity swap commodity swap option 本质就是buyer花钱买权利，有权选择履行和放弃合约，但是seller只有履行的义务 strike/exercise price(执行价格): underlying的标价 premium: 期权的价格 按交割日分类： 美式期权：可以在交割日前任意时间执行 欧式期权：只能在交割日执行（考试默认） 百慕大期权：可以在特定时间段执行 按权利划分 call option, 看涨期权 --&gt; callable bond, 发行人有权强制购回债券 put option, 看跌期权 --&gt; putable bond --&gt; putable bond, 债券持有人有权卖给发行人 其他 ... 特点 高杠杆 零和博弈，买卖双方收益和为0 复杂性 期货 互换 期权 复杂模型 越简单的产品流动性越好 作用 规避风险，套期保值 杠杆投资 绕过政府的监管，e.g. swap产品，互换不同国家的股票，绕过政府，投资其他国家的市场 本质： contract 多头：buyer 空头：seller recommended book: 期权、期货及其他衍生产品]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[行业分析、股票估值]]></title>
    <url>%2F2017%2F08%2F21%2Findustrial-analysis%2F</url>
    <content type="text"><![CDATA[internal competitive forces number of competitiors: + products differences: - exit barrier: +, e.g. 生产设备的投资很高 demand for product: + product shelf life: the shorter, the greater the price competition new entrant threats economies of scale: difficult to enter ... supplier bargaining forces(来自供应商的压力) customer bargaining forces(来自消费者) macroeconomic influences GDP, Interest rates, Inflation... technological influences social influences e.g. spend more money in travelling... demographic influences age distribution, population size equity valuation model discounted cash flow model multiplier models(价格乘数模型): P/E 市盈率 P/B 市净率 ... law of one price: 设置一个benchmark，和上述比率相比]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[cfa l1 经济学基础知识补缺]]></title>
    <url>%2F2017%2F08%2F21%2Fbasics-gleaning%2F</url>
    <content type="text"><![CDATA[失业类型 frictional unemployment(摩擦性失业): 在双选期间的失业状态 structural unemployment(结构性失业): 经济结构调整的结果 cyclical unemployment(周期性失业): 经济衰退引发的失业 贸易区类别 free trade areas(自由贸易区): 自由交易，东南亚 customs union(关税同盟): 相同的关税政策 common market(共同市场): 要素自由流动，南美 economic union(经济联盟): 相同的经济政策 monetary union(货币联盟): 相同的货币政策 证券 固定收益证券 Repurchase Agreements(RPs, 回购协议): 卖出自己的债权，并承诺一段时间后以更高的价格购回 权益证券 Preffered Stock(优先股): 可以定期分红，没有表决权，没有期限 Warrant(认股权证): 可以在一段时间之后以之前约定的价格购买股票 集合投资工具 Mutual Fund(共同基金，互惠基金): 股票基金：投资标的，筹得的基金去投资股票 债权基金 货币市场基金 Exchange-Traded Fund(ETF, 交易所交易基金): 基金份额可以公开交易，比Mutual Fund流动性更好，相比股票税率更低 衍生产品 合约： Forward Contract(远期合约): 有信用风险，到期强制购买 Futures Contract(期货合约): 交易所担保的，到期强制购买 Options Contract(期权合约): 到期可以选择不购买]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[cfa l1 前导知识点--利率计算]]></title>
    <url>%2F2017%2F08%2F20%2Fcfa-pre-course%2F</url>
    <content type="text"><![CDATA[该文为cfa前导课程的学习笔记 NPV(net present value)与IRR(internal rate of return) NPV 1pv(compound inflow) - pv(compound outflow) IRR 使得NPV等于0是的discount rate，门槛收益率，与资金成本比较。资金成本比IRR小则盈利。 NPV法则优先于IRR法则 收益率计算 HPR(holding period return)持有期收益率 例如，股票持有期间的收益，包括股票的增值和分红 TWR(time weighted return)时间加权收益率 不同period的收益（期末-期初）的比率的几何平均值 MWR(money weighted return)货币加权收益率 和IRR相同，要求NPV为0的收益率 在HPR下行时增加投资，MWR降低；反之…… MWR比TWR对以上变动更敏感 MWR和TWR对比 TWR只考虑期初收益与期末收益的对比，期间的交易没有影响 MWR考虑期间的进出 公募基金经理无法完全知道期间现金流的进出，因此只能计算TWR；私募可以完全知道现金的进出，因此可以使用MWR 短期货币市场的收益率 一年以内的，例如国债 HPV, Holding period yield: holding period return，在1年以内 BPY, Bank period yield: 针对纯贴现工具，取决于银行出的价格，单利的形式 MMY, Money market yield: 与BPY区别在于除以的是购买价格 Bond equivalent yield: 365天进行年化 Effective annual yield: 复利形式]]></content>
      <categories>
        <category>cfa</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[activemq使用浅析]]></title>
    <url>%2F2017%2F08%2F02%2Factivemq-usage-sample%2F</url>
    <content type="text"><![CDATA[先挖个坑，后续有更深的了解再写。]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[github pages建站]]></title>
    <url>%2F2017%2F08%2F01%2Fgithub-pages-setup%2F</url>
    <content type="text"><![CDATA[这段时间实验室比较闲，临时起意搭这么一个个人网站。 首先介绍一下用到的技术：这是一个纯静态网站，放在github pages上，使用jekyll生成，另外自己在namecheap上买了一个域名，绑到github自己生成的域名。技术其实相当简单。 jekyll jekyll是一个将“纯文本转化为静态网站和博客”的工具，你可以用markdown（或Textile）写一堆文章，然后用jekyll的命令生成相同样式的html文件。 jekyll几个重要的命令如下： 1234jekyll new my-site // 创建名为my-site的博客cd my-sitejekyll build // 编译jekyll serve // 起一个localhost服务器 手动赞一下 jekyll serve，支持实时更新，调试非常方便。 jekyll项目一般包含这些文件： _config.yml 配置文件 _includes/ 存放一些能够重用的代码 _posts/ 存放发布的文章，可以是markdown或Textile格式 _data/ 网站可能用到的数据，可以是img、css、js等等 _site/ 存放jekyll编译生成的静态网站 github pages 首先在github上新建一个repository存放网站。github会给你分配一个三级域名: username.github.io 你如果希望访问上述网址直接跳到repository对应的项目，repository名字需要指定为 username.github.io，如果使用其他名字，网站将通过： username.github.io/repos_name 来访问。 建站有三种选择： jekyll命令行生成，从头开始建站。 网上找个jekyll theme,自己只需要写文章放到 _posts 文件夹下面即可。 github自带的主题 笔者使用第二种方法。将选择的theme上传到repository中。需要注意的是，有的theme在github上有自己的repository，你可以fork或者 git push --mirror 迁移过来。repository中只需要保存原文件即可，github会自动帮你生成相应的html文件。因此，建议你将 _site 文件夹加到 .gitignore 中。 namecheap namecheap上的域名相对还是比较便宜的，购买需要paypal账号。假设你买的域名example.com，网站在github上的地址为username.github.io。先去github在repository setting页面， 找到github pages一栏，修改custom domain 另外，你还需要去dns管理面板对www.example.com添加一个别名为username.github.io CNAME记录需要过一段时间才能生效，linux或osx可以通过以下命令查看当前的域名解析情况。 1dig www.example.com 完。]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
</search>
